# 0 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp"
# 1 "C:\\devkitPro\\examples\\wii\\Miis\\rendermiiexample\\build//"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp"
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\stdlib.h" 1 3
# 36 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\stdlib.h" 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\cstdlib" 1 3
# 39 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\cstdlib" 3
       
# 40 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\cstdlib" 3

# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\powerpc-eabi\\bits\\c++config.h" 1 3
# 296 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\powerpc-eabi\\bits\\c++config.h" 3

# 296 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\powerpc-eabi\\bits\\c++config.h" 3
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;


#pragma GCC visibility push(default)


  extern "C++" __attribute__ ((__noreturn__, __always_inline__))
  inline void __terminate() noexcept
  {
    void terminate() noexcept __attribute__ ((__noreturn__));
    terminate();
  }
#pragma GCC visibility pop
}
# 329 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\powerpc-eabi\\bits\\c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 508 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\powerpc-eabi\\bits\\c++config.h" 3
namespace std
{
#pragma GCC visibility push(default)




  constexpr inline bool
  __is_constant_evaluated() noexcept
  {





    return __builtin_is_constant_evaluated();



  }
#pragma GCC visibility pop
}
# 655 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\powerpc-eabi\\bits\\c++config.h" 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\powerpc-eabi\\bits\\os_defines.h" 1 3
# 656 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\powerpc-eabi\\bits\\c++config.h" 2 3


# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\powerpc-eabi\\bits\\cpu_defines.h" 1 3
# 659 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\powerpc-eabi\\bits\\c++config.h" 2 3
# 841 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\powerpc-eabi\\bits\\c++config.h" 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\pstl\\pstl_config.h" 1 3
# 842 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\powerpc-eabi\\bits\\c++config.h" 2 3
# 42 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\cstdlib" 2 3
# 75 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\cstdlib" 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdlib.h" 1 3
# 10 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdlib.h" 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\ieeefp.h" 1 3
# 11 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdlib.h" 2 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\_ansi.h" 1 3
# 10 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\_ansi.h" 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\newlib.h" 1 3
# 14 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\newlib.h" 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\_newlib_version.h" 1 3
# 15 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\newlib.h" 2 3
# 11 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\_ansi.h" 2 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\config.h" 1 3




# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\features.h" 1 3
# 25 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\features.h" 3
extern "C" {
# 539 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\features.h" 3
}
# 6 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\config.h" 2 3
# 12 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\_ansi.h" 2 3
# 12 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdlib.h" 2 3




# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 214 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 17 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdlib.h" 2 3

# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 1 3
# 9 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 3
extern "C" {



# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\_ansi.h" 1 3
# 14 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 2 3
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 145 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 3 4
typedef int ptrdiff_t;
# 424 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 435 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 15 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 2 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_types.h" 1 3
# 24 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_types.h" 3
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 359 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 3 4
typedef unsigned int wint_t;
# 25 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_types.h" 2 3


# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\_types.h" 1 3



# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\_default_types.h" 1 3
# 37 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\_default_types.h" 3
extern "C" {



typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\_default_types.h" 3
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 77 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\_default_types.h" 3
typedef int __int32_t;

typedef unsigned int __uint32_t;
# 103 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\_default_types.h" 3
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;
# 134 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\_default_types.h" 3
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\_default_types.h" 3
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 182 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\_default_types.h" 3
typedef int __int_least32_t;

typedef unsigned int __uint_least32_t;
# 200 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\_default_types.h" 3
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 214 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\_default_types.h" 3
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 247 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\_default_types.h" 3
}
# 5 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\_types.h" 2 3


typedef __int64_t _off_t;


typedef __int64_t _fpos_t;


typedef __uint32_t __ino_t;


typedef __uint32_t __dev_t;
# 28 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_types.h" 2 3


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;
# 52 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_types.h" 3
typedef int __pid_t;







typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;
# 90 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_types.h" 3
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;
# 131 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_types.h" 3
typedef unsigned int __size_t;
# 147 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_types.h" 3
typedef signed int _ssize_t;
# 158 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_types.h" 3
typedef _ssize_t __ssize_t;



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;




typedef void *_iconv_t;






typedef unsigned long __clock_t;






typedef __int_least64_t __time_t;





typedef unsigned long __clockid_t;


typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef int __nl_item;
typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;







typedef __builtin_va_list __va_list;
# 16 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 2 3






typedef unsigned long __ULong;
# 34 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\lock.h" 1 3



typedef int _LOCK_T;
typedef int _LOCK_RECURSIVE_T;
# 45 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\lock.h" 3
extern int __libc_lock_init(int*,int);
extern int __libc_lock_close(int*);
extern int __libc_lock_acquire(int*);
extern int __libc_lock_try_acquire(int*);
extern int __libc_lock_release(int*);
# 35 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 2 3
typedef _LOCK_RECURSIVE_T _flock_t;







struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};







struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 98 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
# 122 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 186 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 3
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (*_read) (struct _reent *, void *,
        char *, int);
  int (*_write) (struct _reent *, void *,
         const char *,
         int);
  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);
  int (*_close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 292 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 324 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 3
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 615 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];


  int _unspecified_locale_info;
  struct __locale_t *_locale;

  int __sdidinit;

  void (*__cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**_sig_func)(int);




  struct _glue __sglue;

  __FILE __sf[3];

  void *deviceData;
};
# 822 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 3
extern struct _reent *_impure_ptr __attribute__((__section__(".sdata")));
extern struct _reent *const _global_impure_ptr __attribute__((__section__(".sdata")));

void _reclaim_reent (struct _reent *);
# 848 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\reent.h" 3
}
# 19 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdlib.h" 2 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\cdefs.h" 1 3
# 47 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\cdefs.h" 3
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 48 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\cdefs.h" 2 3
# 20 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdlib.h" 2 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\stdlib.h" 1 3
# 21 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdlib.h" 2 3

# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\alloca.h" 1 3
# 23 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdlib.h" 2 3







# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_locale.h" 1 3
# 9 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_locale.h" 3
struct __locale_t;
typedef struct __locale_t *locale_t;
# 31 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdlib.h" 2 3


extern "C" {

typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;


typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;




typedef int (*__compar_fn_t) (const void *, const void *);







int __locale_mb_cur_max (void);



void abort (void) __attribute__ ((__noreturn__));
int abs (int);

__uint32_t arc4random (void);
__uint32_t arc4random_uniform (__uint32_t);
void arc4random_buf (void *, size_t);

int atexit (void (*__func)(void));
double atof (const char *__nptr);

float atoff (const char *__nptr);

int atoi (const char *__nptr);
int _atoi_r (struct _reent *, const char *__nptr);
long atol (const char *__nptr);
long _atol_r (struct _reent *, const char *__nptr);
void * bsearch (const void *__key,
         const void *__base,
         size_t __nmemb,
         size_t __size,
         __compar_fn_t _compar);
void *calloc(size_t, size_t) __attribute__((__malloc__)) __attribute__((__warn_unused_result__))
      __attribute__((__alloc_size__(1, 2))) __attribute__ ((__nothrow__));
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((__noreturn__));
void free (void *) __attribute__ ((__nothrow__));
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);

char * secure_getenv (const char *__string);

char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);

extern char *suboptarg;
int getsubopt (char **, char * const *, char **);

long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void *malloc(size_t) __attribute__((__malloc__)) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(1))) __attribute__ ((__nothrow__));
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *, const char *, size_t);
int _mbtowc_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *, const char *, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
size_t wcstombs (char *, const wchar_t *, size_t);
size_t _wcstombs_r (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *);


char * mkdtemp (char *);


int mkostemp (char *, int);
int mkostemps (char *, int, int);


int mkstemp (char *);


int mkstemps (char *, int);


char * mktemp (char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));


char * _mkdtemp_r (struct _reent *, char *);
int _mkostemp_r (struct _reent *, char *, int);
int _mkostemps_r (struct _reent *, char *, int, int);
int _mkstemp_r (struct _reent *, char *);
int _mkstemps_r (struct _reent *, char *, int);
char * _mktemp_r (struct _reent *, char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));
void qsort (void *__base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand (void);
void *realloc(void *, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2))) __attribute__ ((__nothrow__));

void *reallocarray(void *, size_t, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2, 3)));
void *reallocf(void *, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2)));


char * realpath (const char * path, char * resolved_path);


int rpmatch (const char *response);


void setkey (const char *__key);

void srand (unsigned __seed);
double strtod (const char * __n, char ** __end_PTR);
double _strtod_r (struct _reent *,const char * __n, char ** __end_PTR);

float strtof (const char * __n, char ** __end_PTR);







long strtol (const char * __n, char ** __end_PTR, int __base);
long _strtol_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);
unsigned long strtoul (const char * __n, char ** __end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);


double strtod_l (const char *, char **, locale_t);
float strtof_l (const char *, char **, locale_t);

extern long double strtold_l (const char *, char **,
         locale_t);

long strtol_l (const char *, char **, int, locale_t);
unsigned long strtoul_l (const char *, char **, int,
    locale_t __loc);
long long strtoll_l (const char *, char **, int, locale_t);
unsigned long long strtoull_l (const char *, char **, int,
          locale_t __loc);


int system (const char *__string);


long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);


int on_exit (void (*__func)(int, void *),void *__arg);


void _Exit (int __status) __attribute__ ((__noreturn__));


int putenv (char *__string);

int _putenv_r (struct _reent *, char *__string);
void * _reallocf_r (struct _reent *, void *, size_t);

int setenv (const char *__string, const char *__value, int __overwrite);

int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);
# 224 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdlib.h" 3
char * __itoa (int, char *, int);
char * __utoa (unsigned, char *, int);

char * itoa (int, char *, int);
char * utoa (unsigned, char *, int);


int rand_r (unsigned *__seed);



double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);


char * initstate (unsigned, char *, size_t);
long random (void);
char * setstate (char *);
void srandom (unsigned);


long long atoll (const char *__nptr);

long long _atoll_r (struct _reent *, const char *__nptr);

long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char * __n, char ** __end_PTR, int __base);

long long _strtoll_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);

unsigned long long strtoull (const char * __n, char ** __end_PTR, int __base);

unsigned long long _strtoull_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);



void cfree (void *);


int unsetenv (const char *__string);

int _unsetenv_r (struct _reent *, const char *__string);



int posix_memalign (void **, size_t, size_t) __attribute__((__nonnull__ (1)))
     __attribute__((__warn_unused_result__));


char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t) __attribute__ ((__nothrow__));
void * _calloc_r (struct _reent *, size_t, size_t) __attribute__ ((__nothrow__));
void _free_r (struct _reent *, void *) __attribute__ ((__nothrow__));
void * _realloc_r (struct _reent *, void *, size_t) __attribute__ ((__nothrow__));
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);






void qsort_r (void *__base, size_t __nmemb, size_t __size, int (*_compar)(const void *, const void *, void *), void *__thunk);
# 322 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdlib.h" 3
extern long double _strtold_r (struct _reent *, const char *, char **);

extern long double strtold (const char *, char **);







void * aligned_alloc(size_t, size_t) __attribute__((__malloc__)) __attribute__((__alloc_align__(1)))
     __attribute__((__alloc_size__(2))) __attribute__((__warn_unused_result__));
int at_quick_exit(void (*)(void));
[[noreturn]] void
 quick_exit(int);


}
# 76 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\cstdlib" 2 3

# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\bits\\std_abs.h" 1 3
# 33 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\bits\\std_abs.h" 3
       
# 34 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\bits\\std_abs.h" 3
# 46 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\bits\\std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\bits\\std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }
# 107 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\bits\\std_abs.h" 3

}
}
# 78 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\cstdlib" 2 3
# 121 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;
# 51 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\c++\\12.1.0\\stdlib.h" 3
using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 2 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/libogc/include/mii.h" 1





# 5 "C:/devkitPro/libogc/include/mii.h"
extern int NoOfMiis;

   extern "C" {
# 17 "C:/devkitPro/libogc/include/mii.h"
typedef struct {

 int exists;

 int invalid;
 int female;
 int month;
 int day;
 int favColor;
 int favorite;


 char name[10 * 2 + 1];


 int height;


 int weight;


 int miiID1;
 int miiID2;
 int miiID3;
 int miiID4;


 int systemID0;
 int systemID1;
 int systemID2;
 int systemID3;


 int faceShape;
 int skinColor;
 int facialFeature;

 int mingleOff;

 int downloaded;


 int hairType;
 int hairColor;
 int hairPart;



 int eyebrowType;

 int eyebrowRotation;

 int eyebrowColor;
 int eyebrowSize;
 int eyebrowVertPos;
 int eyebrowHorizSpacing;


 int eyeType;

 int eyeRotation;
 int eyeVertPos;
 int eyeColor;

 int eyeSize;
 int eyeHorizSpacing;



 int noseType;
 int noseSize;
 int noseVertPos;



 int lipType;
 int lipColor;
 int lipSize;
 int lipVertPos;


 int glassesType;
 int glassesColor;

 int glassesSize;
 int glassesVertPos;


 int mustacheType;
 int beardType;
 int facialHairColor;
 int mustacheSize;
 int mustacheVertPos;


 int mole;
 int moleSize;
 int moleVertPos;
 int moleHorizPos;



 char creator[10 * 2 + 1];
} Mii;


Mii * loadMiis_Wii();
Mii * loadMiis(char * data);


   }
# 3 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/libogc/include/grrlib.h" 1
# 45 "C:/devkitPro/libogc/include/grrlib.h"
# 1 "C:/devkitPro/libogc/include/gccore.h" 1
# 39 "C:/devkitPro/libogc/include/gccore.h"
# 1 "C:/devkitPro/libogc/include/ogc/dsp.h" 1
# 39 "C:/devkitPro/libogc/include/ogc/dsp.h"
# 1 "C:/devkitPro/libogc/include/gctypes.h" 1
# 9 "C:/devkitPro/libogc/include/gctypes.h"
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stdbool.h" 1 3 4
# 10 "C:/devkitPro/libogc/include/gctypes.h" 2
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stdint.h" 1 3 4
# 9 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stdint.h" 3 4
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdint.h" 1 3 4
# 13 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdint.h" 3 4
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_intsup.h" 1 3 4
# 35 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_intsup.h" 3 4
       
       
       
       
       
       
       
       
# 190 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_intsup.h" 3 4
       
       
       
       
       
       
       
       
# 14 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdint.h" 2 3 4
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_stdint.h" 1 3 4
# 15 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_stdint.h" 3 4

# 15 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_stdint.h" 3 4
extern "C" {




typedef __int8_t int8_t ;



typedef __uint8_t uint8_t ;







typedef __int16_t int16_t ;



typedef __uint16_t uint16_t ;







typedef __int32_t int32_t ;



typedef __uint32_t uint32_t ;







typedef __int64_t int64_t ;



typedef __uint64_t uint64_t ;






typedef __intmax_t intmax_t;




typedef __uintmax_t uintmax_t;




typedef __intptr_t intptr_t;




typedef __uintptr_t uintptr_t;




}
# 15 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdint.h" 2 3 4


extern "C" {



typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;




typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;




typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;




typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
# 51 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdint.h" 3 4
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
# 61 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdint.h" 3 4
  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
# 71 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdint.h" 3 4
  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
# 81 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdint.h" 3 4
  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
# 463 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\stdint.h" 3 4
}
# 10 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stdint.h" 2 3 4
# 11 "C:/devkitPro/libogc/include/gctypes.h" 2


   
# 13 "C:/devkitPro/libogc/include/gctypes.h"
  extern "C" {



typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;

typedef int8_t s8;
typedef int16_t s16;
typedef int32_t s32;
typedef int64_t s64;

typedef volatile u8 vu8;
typedef volatile u16 vu16;
typedef volatile u32 vu32;
typedef volatile u64 vu64;

typedef volatile s8 vs8;
typedef volatile s16 vs16;
typedef volatile s32 vs32;
typedef volatile s64 vs64;


typedef s16 sfp16;
typedef s32 sfp32;
typedef u16 ufp16;
typedef u32 ufp32;

typedef float f32;
typedef double f64;

typedef volatile float vf32;
typedef volatile double vf64;
# 79 "C:/devkitPro/libogc/include/gctypes.h"
struct __argv {
 int argvMagic;
 char *commandLine;
 int length;
 int argc;
 char **argv;
 char **endARGV;
};


extern struct __argv *__system_argv;





   }
# 40 "C:/devkitPro/libogc/include/ogc/dsp.h" 2
# 72 "C:/devkitPro/libogc/include/ogc/dsp.h"
   extern "C" {







typedef struct _dsp_task dsptask_t;






typedef void (*DSPTaskCallback)(dsptask_t *task);





typedef void (*DSPCallback)(void);
# 115 "C:/devkitPro/libogc/include/ogc/dsp.h"
struct _dsp_task {
 vu32 state;
 vu32 prio;
 vu32 flags;

 void *iram_maddr;
 u32 iram_len;
 u32 iram_addr;

 void *dram_maddr;
 u32 dram_len;
 u32 dram_addr;

 u16 init_vec;
 u16 resume_vec;

 DSPTaskCallback init_cb;
 DSPTaskCallback res_cb;
 DSPTaskCallback done_cb;
 DSPTaskCallback req_cb;

 struct _dsp_task *next;
 struct _dsp_task *prev;
};







void DSP_Init(void);







u32 DSP_CheckMailTo(void);







u32 DSP_CheckMailFrom(void);







u32 DSP_ReadMailFrom(void);







void DSP_AssertInt(void);
# 187 "C:/devkitPro/libogc/include/ogc/dsp.h"
void DSP_SendMailTo(u32 mail);







u32 DSP_ReadCPUtoDSP(void);
# 204 "C:/devkitPro/libogc/include/ogc/dsp.h"
dsptask_t* DSP_AddTask(dsptask_t *task);

dsptask_t* DSP_AssertTask(dsptask_t *task);

void DSP_CancelTask(dsptask_t *task);

void DSP_Reset(void);

void DSP_Halt(void);

void DSP_Unhalt(void);

u32 DSP_GetDMAStatus(void);







DSPCallback DSP_RegisterCallback(DSPCallback usr_cb);


   }
# 40 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/aram.h" 1
# 41 "C:/devkitPro/libogc/include/ogc/aram.h"
# 1 "C:/devkitPro/libogc/include/gcbool.h" 1
       

typedef unsigned int BOOL;
# 42 "C:/devkitPro/libogc/include/ogc/aram.h" 2
# 71 "C:/devkitPro/libogc/include/ogc/aram.h"
   extern "C" {
# 81 "C:/devkitPro/libogc/include/ogc/aram.h"
typedef void (*ARCallback)(void);
# 94 "C:/devkitPro/libogc/include/ogc/aram.h"
ARCallback AR_RegisterCallback(ARCallback callback);
# 103 "C:/devkitPro/libogc/include/ogc/aram.h"
u32 AR_GetDMAStatus(void);
# 147 "C:/devkitPro/libogc/include/ogc/aram.h"
u32 AR_Init(u32 *stack_idx_array,u32 num_entries);
# 167 "C:/devkitPro/libogc/include/ogc/aram.h"
void AR_StartDMA(u32 dir,u32 memaddr,u32 aramaddr,u32 len);
# 180 "C:/devkitPro/libogc/include/ogc/aram.h"
u32 AR_Alloc(u32 len);
# 191 "C:/devkitPro/libogc/include/ogc/aram.h"
u32 AR_Free(u32 *len);
# 202 "C:/devkitPro/libogc/include/ogc/aram.h"
void AR_Clear(u32 flag);
# 212 "C:/devkitPro/libogc/include/ogc/aram.h"
BOOL AR_CheckInit(void);
# 223 "C:/devkitPro/libogc/include/ogc/aram.h"
void AR_Reset(void);
# 232 "C:/devkitPro/libogc/include/ogc/aram.h"
u32 AR_GetSize(void);
# 241 "C:/devkitPro/libogc/include/ogc/aram.h"
u32 AR_GetBaseAddress(void);
# 250 "C:/devkitPro/libogc/include/ogc/aram.h"
u32 AR_GetInternalSize(void);
# 269 "C:/devkitPro/libogc/include/ogc/aram.h"
   }
# 41 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/arqueue.h" 1
# 36 "C:/devkitPro/libogc/include/ogc/arqueue.h"
# 1 "C:/devkitPro/libogc/include/ogc/lwp_queue.h" 1
# 13 "C:/devkitPro/libogc/include/ogc/lwp_queue.h"
extern "C" {


typedef struct _lwpnode {
 struct _lwpnode *next;
 struct _lwpnode *prev;
} lwp_node;

typedef struct _lwpqueue {
 lwp_node *first;
 lwp_node *perm_null;
 lwp_node *last;
} lwp_queue;

void __lwp_queue_initialize(lwp_queue *,void *,u32,u32);
lwp_node* __lwp_queue_get(lwp_queue *);
void __lwp_queue_append(lwp_queue *,lwp_node *);
void __lwp_queue_extract(lwp_node *);
void __lwp_queue_insert(lwp_node *,lwp_node *);






 }
# 37 "C:/devkitPro/libogc/include/ogc/arqueue.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/aram.h" 1
# 38 "C:/devkitPro/libogc/include/ogc/arqueue.h" 2
# 48 "C:/devkitPro/libogc/include/ogc/arqueue.h"
   extern "C" {


enum {
 ARQ_TASK_READY = 0,
 ARQ_TASK_RUNNING,
 ARQ_TASK_FINISHED
};

typedef struct _arq_request ARQRequest;
typedef void (*ARQCallback)(ARQRequest *);

struct _arq_request {
 lwp_node node;
 u32 owner,dir,prio,state;
 u32 aram_addr,mram_addr,len;
 ARQCallback callback;
};

void ARQ_Init(void);
void ARQ_Reset(void);
# 86 "C:/devkitPro/libogc/include/ogc/arqueue.h"
void ARQ_PostRequest(ARQRequest *req,u32 owner,u32 dir,u32 prio,u32 aram_addr,u32 mram_addr,u32 len);
# 104 "C:/devkitPro/libogc/include/ogc/arqueue.h"
void ARQ_PostRequestAsync(ARQRequest *req,u32 owner,u32 dir,u32 prio,u32 aram_addr,u32 mram_addr,u32 len,ARQCallback cb);
void ARQ_RemoveRequest(ARQRequest *req);
void ARQ_SetChunkSize(u32 size);
u32 ARQ_GetChunkSize(void);
void ARQ_FlushQueue(void);
u32 ARQ_RemoveOwnerRequest(u32 owner);


   }
# 42 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/arqmgr.h" 1
# 47 "C:/devkitPro/libogc/include/ogc/arqmgr.h"
   extern "C" {
# 56 "C:/devkitPro/libogc/include/ogc/arqmgr.h"
typedef void (*ARQMCallback)(s32 result);
# 68 "C:/devkitPro/libogc/include/ogc/arqmgr.h"
void ARQM_Init(u32 arambase,s32 len);
# 80 "C:/devkitPro/libogc/include/ogc/arqmgr.h"
u32 ARQM_PushData(void *buffer,s32 len);

void ARQM_Pop(void);







u32 ARQM_GetZeroBuffer(void);
# 99 "C:/devkitPro/libogc/include/ogc/arqmgr.h"
u32 ARQM_GetStackPointer(void);
# 108 "C:/devkitPro/libogc/include/ogc/arqmgr.h"
u32 ARQM_GetFreeSize(void);


   }
# 43 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/audio.h" 1
# 70 "C:/devkitPro/libogc/include/ogc/audio.h"
   extern "C" {
# 79 "C:/devkitPro/libogc/include/ogc/audio.h"
typedef void (*AIDCallback)(void);
# 88 "C:/devkitPro/libogc/include/ogc/audio.h"
typedef void (*AISCallback)(u32 smp_cnt);
# 99 "C:/devkitPro/libogc/include/ogc/audio.h"
AISCallback AUDIO_RegisterStreamCallback(AISCallback callback);
# 110 "C:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_Init(u8 *stack);
# 121 "C:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_SetStreamVolLeft(u8 vol);
# 130 "C:/devkitPro/libogc/include/ogc/audio.h"
u8 AUDIO_GetStreamVolLeft(void);
# 141 "C:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_SetStreamVolRight(u8 vol);
# 150 "C:/devkitPro/libogc/include/ogc/audio.h"
u8 AUDIO_GetStreamVolRight(void);
# 161 "C:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_SetStreamSampleRate(u32 rate);
# 170 "C:/devkitPro/libogc/include/ogc/audio.h"
u32 AUDIO_GetStreamSampleRate(void);
# 184 "C:/devkitPro/libogc/include/ogc/audio.h"
AIDCallback AUDIO_RegisterDMACallback(AIDCallback callback);
# 196 "C:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_InitDMA(u32 startaddr,u32 len);
# 205 "C:/devkitPro/libogc/include/ogc/audio.h"
u16 AUDIO_GetDMAEnableFlag(void);
# 217 "C:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_StartDMA(void);
# 226 "C:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_StopDMA(void);
# 235 "C:/devkitPro/libogc/include/ogc/audio.h"
u32 AUDIO_GetDMABytesLeft(void);
# 244 "C:/devkitPro/libogc/include/ogc/audio.h"
u32 AUDIO_GetDMALength(void);
# 253 "C:/devkitPro/libogc/include/ogc/audio.h"
u32 AUDIO_GetDMAStartAddr(void);
# 264 "C:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_SetStreamTrigger(u32 cnt);
# 273 "C:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_ResetStreamSampleCnt(void);
# 284 "C:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_SetDSPSampleRate(u8 rate);
# 293 "C:/devkitPro/libogc/include/ogc/audio.h"
u32 AUDIO_GetDSPSampleRate(void);
# 304 "C:/devkitPro/libogc/include/ogc/audio.h"
void AUDIO_SetStreamPlayState(u32 state);
# 313 "C:/devkitPro/libogc/include/ogc/audio.h"
u32 AUDIO_GetStreamPlayState(void);


   }
# 44 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/cache.h" 1
# 48 "C:/devkitPro/libogc/include/ogc/cache.h"
   extern "C" {
# 58 "C:/devkitPro/libogc/include/ogc/cache.h"
void DCEnable(void);
# 67 "C:/devkitPro/libogc/include/ogc/cache.h"
void DCDisable(void);
# 79 "C:/devkitPro/libogc/include/ogc/cache.h"
void DCFreeze(void);
# 91 "C:/devkitPro/libogc/include/ogc/cache.h"
void DCUnfreeze(void);
# 103 "C:/devkitPro/libogc/include/ogc/cache.h"
void DCFlashInvalidate(void);
# 117 "C:/devkitPro/libogc/include/ogc/cache.h"
void DCInvalidateRange(void *startaddress,u32 len);
# 132 "C:/devkitPro/libogc/include/ogc/cache.h"
void DCFlushRange(void *startaddress,u32 len);
# 145 "C:/devkitPro/libogc/include/ogc/cache.h"
void DCStoreRange(void *startaddress,u32 len);
# 160 "C:/devkitPro/libogc/include/ogc/cache.h"
void DCFlushRangeNoSync(void *startaddress,u32 len);
# 174 "C:/devkitPro/libogc/include/ogc/cache.h"
void DCStoreRangeNoSync(void *startaddress,u32 len);
# 186 "C:/devkitPro/libogc/include/ogc/cache.h"
void DCZeroRange(void *startaddress,u32 len);
# 198 "C:/devkitPro/libogc/include/ogc/cache.h"
void DCTouchRange(void *startaddress,u32 len);
# 209 "C:/devkitPro/libogc/include/ogc/cache.h"
void ICSync(void);
# 221 "C:/devkitPro/libogc/include/ogc/cache.h"
void ICFlashInvalidate(void);
# 230 "C:/devkitPro/libogc/include/ogc/cache.h"
void ICEnable(void);
# 239 "C:/devkitPro/libogc/include/ogc/cache.h"
void ICDisable(void);
# 251 "C:/devkitPro/libogc/include/ogc/cache.h"
void ICFreeze(void);
# 263 "C:/devkitPro/libogc/include/ogc/cache.h"
void ICUnfreeze(void);
# 276 "C:/devkitPro/libogc/include/ogc/cache.h"
void ICBlockInvalidate(void *startaddress);
# 290 "C:/devkitPro/libogc/include/ogc/cache.h"
void ICInvalidateRange(void *startaddress,u32 len);
# 305 "C:/devkitPro/libogc/include/ogc/cache.h"
void L2Enhance(void);


void LCEnable(void);
void LCDisable(void);
void LCLoadBlocks(void *,void *,u32);
void LCStoreBlocks(void *,void *,u32);
u32 LCLoadData(void *,void *,u32);
u32 LCStoreData(void *,void *,u32);
u32 LCQueueLength(void);
u32 LCQueueWait(u32);
void LCFlushQueue(void);
void LCAlloc(void *,u32);
void LCAllocNoInvalidate(void *,u32);
void LCAllocOneTag(BOOL,void *);
void LCAllocTags(BOOL,void *,u32);



   }
# 45 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/card.h" 1
# 117 "C:/devkitPro/libogc/include/ogc/card.h"
   extern "C" {
# 129 "C:/devkitPro/libogc/include/ogc/card.h"
typedef struct _card_file {
 s32 chn;
 s32 filenum;
 s32 offset;
 s32 len;
 u16 iblock;
} card_file;
# 148 "C:/devkitPro/libogc/include/ogc/card.h"
typedef struct _card_dir {
      s32 chn;
      u32 fileno;
   u32 filelen;
   u8 permissions;
      u8 filename[32];
      u8 gamecode[4];
      u8 company[2];
      bool showall;
} card_dir;
# 177 "C:/devkitPro/libogc/include/ogc/card.h"
typedef struct _card_direntry {
 u8 gamecode[4];
 u8 company[2];
 u8 pad_00;
 u8 banner_fmt;
 u8 filename[32];
 u32 last_modified;
 u32 icon_addr;
 u16 icon_fmt;
 u16 icon_speed;
 u8 permission;
 u8 copy_times;
 u16 block;
 u16 length;
 u16 pad_01;
 u32 comment_addr;
} card_direntry;
# 212 "C:/devkitPro/libogc/include/ogc/card.h"
typedef struct _card_stat {
 u8 filename[32];
 u32 len;
 u32 time;
 u8 gamecode[4];
 u8 company[2];
 u8 banner_fmt;
 u32 icon_addr;
 u16 icon_fmt;
 u16 iconfmt[8];
 u16 icon_speed;
 u16 iconspeed[8];
 u32 comment_addr;
 u32 offset_banner;
 u32 offset_banner_tlut;
 u32 offset_icon[8];
 u32 offset_icon_tlut[8];
 u32 offset_data;
} card_stat;
# 246 "C:/devkitPro/libogc/include/ogc/card.h"
typedef void (*cardcallback)(s32 chan,s32 result);
# 256 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Init(const char *gamecode,const char *company);
# 265 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Probe(s32 chn);
# 276 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_ProbeEx(s32 chn,s32 *mem_size,s32 *sect_size);
# 287 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Mount(s32 chn,void *workarea,cardcallback detach_cb);
# 299 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_MountAsync(s32 chn,void *workarea,cardcallback detach_cb,cardcallback attach_cb);
# 308 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Unmount(s32 chn);
# 320 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Read(card_file *file,void *buffer,u32 len,u32 offset);
# 333 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_ReadAsync(card_file *file,void *buffer,u32 len,u32 offset,cardcallback callback);
# 344 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Open(s32 chn,const char *filename,card_file *file);
# 355 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_OpenEntry(s32 chn,card_dir *entry,card_file *file);
# 364 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Close(card_file *file);
# 376 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Create(s32 chn,const char *filename,u32 size,card_file *file);
# 389 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_CreateAsync(s32 chn,const char *filename,u32 size,card_file *file,cardcallback callback);
# 400 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_CreateEntry(s32 chn,card_dir *direntry,card_file *file);
# 412 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_CreateEntryAsync(s32 chn,card_dir *direntry,card_file *file,cardcallback callback);
# 422 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Delete(s32 chn,const char *filename);
# 433 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_DeleteAsync(s32 chn,const char *filename,cardcallback callback);
# 443 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_DeleteEntry(s32 chn,card_dir *dir_entry);
# 454 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_DeleteEntryAsync(s32 chn,card_dir *dir_entry,cardcallback callback);
# 466 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_Write(card_file *file,void *buffer,u32 len,u32 offset);
# 479 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_WriteAsync(card_file *file,void *buffer,u32 len,u32 offset,cardcallback callback);
# 488 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_GetErrorCode(s32 chn);
# 499 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_FindFirst(s32 chn, card_dir *dir, bool showall);
# 508 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_FindNext(card_dir *dir);
# 520 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_GetDirectory(s32 chn, card_dir *dir_entries, s32 *count, bool showall);
# 530 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_GetSectorSize(s32 chn,u32 *sector_size);
# 540 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_GetBlockCount(s32 chn,u32 *block_count);
# 551 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_GetStatus(s32 chn,s32 fileno,card_stat *stats);
# 561 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_GetStatusEx(s32 chn, s32 fileno, card_direntry *entry);
# 571 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_SetStatus(s32 chn,s32 fileno,card_stat *stats);
# 583 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_SetStatusAsync(s32 chn,s32 fileno,card_stat *stats,cardcallback callback);
# 592 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_SetStatusEx(s32 chn, s32 fileno, card_direntry *entry);
# 602 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_GetAttributes(s32 chn,s32 fileno,u8 *attr);
# 613 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_SetAttributes(s32 chn,s32 fileno,u8 attr);
# 625 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_SetAttributesAsync(s32 chn,s32 fileno,u8 attr,cardcallback callback);




s32 CARD_Format(s32 chn);



s32 CARD_FormatAsync(s32 chn,cardcallback callback);
# 643 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_SetCompany(const char *company);
# 652 "C:/devkitPro/libogc/include/ogc/card.h"
s32 CARD_SetGamecode(const char *gamecode);







s32 CARD_GetSerialNo(s32 chn,u32 *serial1,u32 *serial2);







s32 CARD_GetFreeBlocks(s32 chn, u16* freeblocks);


   }
# 46 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/cast.h" 1
# 25 "C:/devkitPro/libogc/include/ogc/cast.h"
extern "C" {







static inline void CAST_Init(void)
{
 __asm__ __volatile__ (
  "li		3,0x0004\n		 oris	3,3,0x0004\n		 mtspr	914,3\n		 li		3,0x0005\n		 oris	3,3,0x0005\n		 mtspr	915,3\n		 li		3,0x0006\n		 oris	3,3,0x0006\n		 mtspr	916,3\n		 li		3,0x0007\n		 oris	3,3,0x0007\n		 mtspr	917,3\n"
# 48 "C:/devkitPro/libogc/include/ogc/cast.h"
   : : : "r3"
 );
}



static inline void CAST_SetGQR2(u32 type,s32 scale)
{
  u32 val = ((((((scale)<<8)&(0x3f << 8))|(type))<<16)|((((scale)<<8)&(0x3f << 8))|(type)));
 __asm__ __volatile__ ("mtspr %0,%1" : : "i"(914), "b"(val));
}

static inline void CAST_SetGQR3(u32 type,s32 scale)
{
  u32 val = ((((((scale)<<8)&(0x3f << 8))|(type))<<16)|((((scale)<<8)&(0x3f << 8))|(type)));
 __asm__ __volatile__ ("mtspr %0,%1" : : "i"(915), "b"(val));
}

static inline void CAST_SetGQR4(u32 type,s32 scale)
{
  u32 val = ((((((scale)<<8)&(0x3f << 8))|(type))<<16)|((((scale)<<8)&(0x3f << 8))|(type)));
 __asm__ __volatile__ ("mtspr %0,%1" : : "i"(916), "b"(val));
}

static inline void CAST_SetGQR5(u32 type,s32 scale)
{
  u32 val = ((((((scale)<<8)&(0x3f << 8))|(type))<<16)|((((scale)<<8)&(0x3f << 8))|(type)));
 __asm__ __volatile__ ("mtspr %0,%1" : : "i"(917), "b"(val));
}

static inline void CAST_SetGQR6(u32 type,s32 scale)
{
  u32 val = ((((((scale)<<8)&(0x3f << 8))|(type))<<16)|((((scale)<<8)&(0x3f << 8))|(type)));
 __asm__ __volatile__ ("mtspr %0,%1" : : "i"(918), "b"(val));
}

static inline void CAST_SetGQR7(u32 type,s32 scale)
{
  u32 val = ((((((scale)<<8)&(0x3f << 8))|(type))<<16)|((((scale)<<8)&(0x3f << 8))|(type)));
 __asm__ __volatile__ ("mtspr %0,%1" : : "i"(919), "b"(val));
}
# 97 "C:/devkitPro/libogc/include/ogc/cast.h"
static inline f32 __castu8f32( u8 *in)
{
  f32 rval;
 __asm__ __volatile__ (
  "psq_l	%[rval],0(%[in]),1,2" : [rval]"=f"(rval) : [in]"r"(in)
 );
 return rval;
}

static inline f32 __castu16f32( u16 *in)
{
  f32 rval;
 __asm__ __volatile__ (
  "psq_l	%[rval],0(%[in]),1,3" : [rval]"=f"(rval) : [in]"r"(in)
 );
 return rval;
}

static inline f32 __casts8f32( s8 *in)
{
  f32 rval;
 __asm__ __volatile__ (
  "psq_l	%[rval],0(%[in]),1,4" : [rval]"=f"(rval) : [in]"r"(in)
 );
 return rval;
}

static inline f32 __casts16f32( s16 *in)
{
  f32 rval;
 __asm__ __volatile__ (
  "psq_l	%[rval],0(%[in]),1,5" : [rval]"=f"(rval) : [in]"r"(in)
 );
 return rval;
}

static inline void castu8f32( u8 *in, volatile f32 *out)
{
 *out = __castu8f32(in);
}

static inline void castu16f32( u16 *in, volatile f32 *out)
{
 *out = __castu16f32(in);
}

static inline void casts8f32( s8 *in, volatile f32 *out)
{
 *out = __casts8f32(in);
}

static inline void casts16f32( s16 *in, volatile f32 *out)
{
 *out = __casts16f32(in);
}







static inline u8 __castf32u8( f32 in)
{
 f32 a;
  u8 rval;
  f32 *ptr = &a;

 __asm__ __volatile__ (
  "psq_st	%[in],0(%[ptr]),1,2\n"
  "lbz	%[out],0(%[ptr])\n"
  : [out]"=r"(rval), [ptr]"+r"(ptr) : [in]"f"(in)
 );
 return rval;
}

static inline u16 __castf32u16( f32 in)
{
 f32 a;
  u16 rval;
  f32 *ptr = &a;

 __asm__ __volatile__ (
  "psq_st	%[in],0(%[ptr]),1,3\n"
  "lhz	%[out],0(%[ptr])\n"
  : [out]"=r"(rval), [ptr]"+r"(ptr) : [in]"f"(in)
 );
 return rval;
}

static inline s8 __castf32s8( f32 in)
{
 f32 a;
  s8 rval;
  f32 *ptr = &a;

 __asm__ __volatile__ (
  "psq_st	%[in],0(%[ptr]),1,4\n"
  "lbz	%[out],0(%[ptr])\n"
  : [out]"=r"(rval), [ptr]"+r"(ptr) : [in]"f"(in)
 );
 return rval;
}

static inline s16 __castf32s16( f32 in)
{
 f32 a;
  s16 rval;
  f32 *ptr = &a;

 __asm__ __volatile__ (
  "psq_st	%[in],0(%[ptr]),1,5\n"
  "lha	%[out],0(%[ptr])\n"
  : [out]"=r"(rval), [ptr]"+r"(ptr) : [in]"f"(in)
 );
 return rval;
}

static inline void castf32u8( f32 *in, vu8 *out)
{
 *out = __castf32u8(*in);
}

static inline void castf32u16( f32 *in, vu16 *out)
{
 *out = __castf32u16(*in);
}

static inline void castf32s8( f32 *in, vs8 *out)
{
 *out = __castf32s8(*in);
}

static inline void castf32s16( f32 *in, vs16 *out)
{
 *out = __castf32s16(*in);
}




}
# 47 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/color.h" 1
# 48 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/consol.h" 1
# 10 "C:/devkitPro/libogc/include/ogc/consol.h"
# 1 "C:/devkitPro/libogc/include/ogc/gx_struct.h" 1
# 42 "C:/devkitPro/libogc/include/ogc/gx_struct.h"
   extern "C" {
# 58 "C:/devkitPro/libogc/include/ogc/gx_struct.h"
typedef struct _gx_rmodeobj {
 u32 viTVMode;
 u16 fbWidth;
 u16 efbHeight;
 u16 xfbHeight;
 u16 viXOrigin;
 u16 viYOrigin;
 u16 viWidth;
 u16 viHeight;
 u32 xfbMode;
 u8 field_rendering;
 u8 aa;
 u8 sample_pattern[12][2];
 u8 vfilter[7];
} GXRModeObj;


   }
# 11 "C:/devkitPro/libogc/include/ogc/consol.h" 2






 extern "C" {
# 31 "C:/devkitPro/libogc/include/ogc/consol.h"
void CON_Init(void *framebuffer,int xstart,int ystart,int xres,int yres,int stride);
# 44 "C:/devkitPro/libogc/include/ogc/consol.h"
s32 CON_InitEx(GXRModeObj *rmode, s32 conXOrigin,s32 conYOrigin,s32 conWidth,s32 conHeight);
# 54 "C:/devkitPro/libogc/include/ogc/consol.h"
void CON_GetMetrics(int *cols, int *rows);
# 64 "C:/devkitPro/libogc/include/ogc/consol.h"
void CON_GetPosition(int *cols, int *rows);
# 75 "C:/devkitPro/libogc/include/ogc/consol.h"
void CON_EnableGecko(int channel,int safe);


 }
# 49 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/dvd.h" 1
# 42 "C:/devkitPro/libogc/include/ogc/dvd.h"
# 1 "C:/devkitPro/libogc/include/ogc/disc_io.h" 1
# 47 "C:/devkitPro/libogc/include/ogc/disc_io.h"
typedef uint32_t sec_t;

typedef bool (* FN_MEDIUM_STARTUP)(void) ;
typedef bool (* FN_MEDIUM_ISINSERTED)(void) ;
typedef bool (* FN_MEDIUM_READSECTORS)(sec_t sector, sec_t numSectors, void* buffer) ;
typedef bool (* FN_MEDIUM_WRITESECTORS)(sec_t sector, sec_t numSectors, const void* buffer) ;
typedef bool (* FN_MEDIUM_CLEARSTATUS)(void) ;
typedef bool (* FN_MEDIUM_SHUTDOWN)(void) ;

struct DISC_INTERFACE_STRUCT {
 unsigned long ioType ;
 unsigned long features ;
 FN_MEDIUM_STARTUP startup ;
 FN_MEDIUM_ISINSERTED isInserted ;
 FN_MEDIUM_READSECTORS readSectors ;
 FN_MEDIUM_WRITESECTORS writeSectors ;
 FN_MEDIUM_CLEARSTATUS clearStatus ;
 FN_MEDIUM_SHUTDOWN shutdown ;
} ;

typedef struct DISC_INTERFACE_STRUCT DISC_INTERFACE ;
# 43 "C:/devkitPro/libogc/include/ogc/dvd.h" 2
# 103 "C:/devkitPro/libogc/include/ogc/dvd.h"
   extern "C" {







typedef struct _dvddiskid dvddiskid;
# 128 "C:/devkitPro/libogc/include/ogc/dvd.h"
struct _dvddiskid {
 s8 gamename[4];
 s8 company[2];
 u8 disknum;
 u8 gamever;
 u8 streaming;
 u8 streambufsize;
 u8 pad[22];
};





typedef struct _dvdcmdblk dvdcmdblk;






typedef void (*dvdcbcallback)(s32 result,dvdcmdblk *block);







struct _dvdcmdblk {
 lwp_node node;
 u32 cmd;
 s32 state;
 s64 offset;
 u32 len;
 void *buf;
 u32 currtxsize;
 u32 txdsize;
 dvddiskid *id;
 dvdcbcallback cb;
 void *usrdata;
};






typedef struct _dvddrvinfo dvddrvinfo;
# 190 "C:/devkitPro/libogc/include/ogc/dvd.h"
struct _dvddrvinfo {
 u16 rev_level;
 u16 dev_code;
 u32 rel_date;
 u8 pad[24];
};






typedef struct _dvdfileinfo dvdfileinfo;
# 212 "C:/devkitPro/libogc/include/ogc/dvd.h"
typedef void (*dvdcallback)(s32 result,dvdfileinfo *info);







struct _dvdfileinfo {
 dvdcmdblk block;
 u32 addr;
 u32 len;
 dvdcallback cb;
};
# 236 "C:/devkitPro/libogc/include/ogc/dvd.h"
void DVD_Init(void);
void DVD_Pause(void);
# 248 "C:/devkitPro/libogc/include/ogc/dvd.h"
void DVD_Reset(u32 reset_mode);
# 259 "C:/devkitPro/libogc/include/ogc/dvd.h"
s32 DVD_Mount(void);
s32 DVD_GetDriveStatus(void);
# 283 "C:/devkitPro/libogc/include/ogc/dvd.h"
s32 DVD_MountAsync(dvdcmdblk *block,dvdcbcallback cb);
# 297 "C:/devkitPro/libogc/include/ogc/dvd.h"
s32 DVD_ControlDrive(dvdcmdblk *block,u32 cmd);
# 310 "C:/devkitPro/libogc/include/ogc/dvd.h"
s32 DVD_ControlDriveAsync(dvdcmdblk *block,u32 cmd,dvdcbcallback cb);
# 324 "C:/devkitPro/libogc/include/ogc/dvd.h"
s32 DVD_SetGCMOffset(dvdcmdblk *block,s64 offset);
# 339 "C:/devkitPro/libogc/include/ogc/dvd.h"
s32 DVD_SetGCMOffsetAsync(dvdcmdblk *block,s64 offset,dvdcbcallback cb);

s32 DVD_GetCmdBlockStatus(dvdcmdblk *block);
s32 DVD_SpinUpDrive(dvdcmdblk *block);
s32 DVD_SpinUpDriveAsync(dvdcmdblk *block,dvdcbcallback cb);
s32 DVD_Inquiry(dvdcmdblk *block,dvddrvinfo *info);
s32 DVD_InquiryAsync(dvdcmdblk *block,dvddrvinfo *info,dvdcbcallback cb);
s32 DVD_ReadPrio(dvdcmdblk *block,void *buf,u32 len,s64 offset,s32 prio);
s32 DVD_ReadAbsAsyncPrio(dvdcmdblk *block,void *buf,u32 len,s64 offset,dvdcbcallback cb,s32 prio);
s32 DVD_ReadAbsAsyncForBS(dvdcmdblk *block,void *buf,u32 len,s64 offset,dvdcbcallback cb);
s32 DVD_SeekPrio(dvdcmdblk *block,s64 offset,s32 prio);
s32 DVD_SeekAbsAsyncPrio(dvdcmdblk *block,s64 offset,dvdcbcallback cb,s32 prio);
s32 DVD_CancelAllAsync(dvdcbcallback cb);
s32 DVD_StopStreamAtEndAsync(dvdcmdblk *block,dvdcbcallback cb);
s32 DVD_StopStreamAtEnd(dvdcmdblk *block);
s32 DVD_ReadDiskID(dvdcmdblk *block,dvddiskid *id,dvdcbcallback cb);
u32 DVD_SetAutoInvalidation(u32 auto_inv);
dvddiskid* DVD_GetCurrentDiskID(void);
dvddrvinfo* DVD_GetDriveInfo(void);





extern const DISC_INTERFACE __io_gcdvd;


   }
# 50 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/exi.h" 1
# 138 "C:/devkitPro/libogc/include/ogc/exi.h"
   extern "C" {







typedef s32 (*EXICallback)(s32 chn,s32 dev);
# 155 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_ProbeEx(s32 nChn);
# 164 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Probe(s32 nChn);
# 175 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Lock(s32 nChn,s32 nDev,EXICallback unlockCB);
# 184 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Unlock(s32 nChn);
# 195 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Select(s32 nChn,s32 nDev,s32 nFrq);
# 206 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_SelectSD(s32 nChn,s32 nDev,s32 nFrq);
# 215 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Deselect(s32 nChn);
# 224 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Sync(s32 nChn);
# 237 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Imm(s32 nChn,void *pData,u32 nLen,u32 nMode,EXICallback tc_cb);
# 249 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_ImmEx(s32 nChn,void *pData,u32 nLen,u32 nMode);
# 262 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Dma(s32 nChn,void *pData,u32 nLen,u32 nMode,EXICallback tc_cb);
# 271 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_GetState(s32 nChn);
# 282 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_GetID(s32 nChn,s32 nDev,u32 *nId);
# 292 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Attach(s32 nChn,EXICallback ext_cb);
# 301 "C:/devkitPro/libogc/include/ogc/exi.h"
s32 EXI_Detach(s32 nChn);







void EXI_ProbeReset(void);
# 319 "C:/devkitPro/libogc/include/ogc/exi.h"
EXICallback EXI_RegisterEXICallback(s32 nChn,EXICallback exi_cb);


   }
# 51 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/gu.h" 1
# 80 "C:/devkitPro/libogc/include/ogc/gu.h"
   extern "C" {
# 94 "C:/devkitPro/libogc/include/ogc/gu.h"
typedef struct _vecf {
 f32 x,y,z;
} guVector;
# 107 "C:/devkitPro/libogc/include/ogc/gu.h"
typedef struct _qrtn {
 f32 x,y,z,w;
} guQuaternion;





typedef f32 Mtx[3][4];
typedef f32 (*MtxP)[4];







typedef f32 ROMtx[4][3];
typedef f32 (*ROMtxP)[3];




typedef f32 Mtx33[3][3];
typedef f32 (*Mtx33P)[3];





typedef f32 Mtx44[4][4];
typedef f32 (*Mtx44P)[4];
# 162 "C:/devkitPro/libogc/include/ogc/gu.h"
void guFrustum(Mtx44 mt,f32 t,f32 b,f32 l,f32 r,f32 n,f32 f);
# 187 "C:/devkitPro/libogc/include/ogc/gu.h"
void guPerspective(Mtx44 mt,f32 fovy,f32 aspect,f32 n,f32 f);
# 211 "C:/devkitPro/libogc/include/ogc/gu.h"
void guOrtho(Mtx44 mt,f32 t,f32 b,f32 l,f32 r,f32 n,f32 f);
# 244 "C:/devkitPro/libogc/include/ogc/gu.h"
void guLightPerspective(Mtx mt,f32 fovY,f32 aspect,f32 scaleS,f32 scaleT,f32 transS,f32 transT);
# 273 "C:/devkitPro/libogc/include/ogc/gu.h"
void guLightOrtho(Mtx mt,f32 t,f32 b,f32 l,f32 r,f32 scaleS,f32 scaleT,f32 transS,f32 transT);
# 303 "C:/devkitPro/libogc/include/ogc/gu.h"
void guLightFrustum(Mtx mt,f32 t,f32 b,f32 l,f32 r,f32 n,f32 scaleS,f32 scaleT,f32 transS,f32 transT);
# 325 "C:/devkitPro/libogc/include/ogc/gu.h"
void guLookAt(Mtx mt,guVector *camPos,guVector *camUp,guVector *target);
# 346 "C:/devkitPro/libogc/include/ogc/gu.h"
void guVecHalfAngle(guVector *a,guVector *b,guVector *half);

void c_guVecAdd(guVector *a,guVector *b,guVector *ab);
void c_guVecSub(guVector *a,guVector *b,guVector *ab);
void c_guVecScale(guVector *src,guVector *dst,f32 scale);
void c_guVecNormalize(guVector *v);
void c_guVecMultiply(Mtx mt,guVector *src,guVector *dst);
void c_guVecCross(guVector *a,guVector *b,guVector *axb);
void c_guVecMultiplySR(Mtx mt,guVector *src,guVector *dst);
f32 c_guVecDotProduct(guVector *a,guVector *b);


void ps_guVecAdd( guVector *a, guVector *b, guVector *ab);
void ps_guVecSub( guVector *a, guVector *b, guVector *ab);
void ps_guVecScale( guVector *src, guVector *dst,f32 scale);
void ps_guVecNormalize( guVector *v);
void ps_guVecCross( guVector *a, guVector *b, guVector *axb);
void ps_guVecMultiply( Mtx mt, guVector *src, guVector *dst);
void ps_guVecMultiplySR( Mtx mt, guVector *src, guVector *dst);
f32 ps_guVecDotProduct( guVector *a, guVector *b);


void c_guQuatAdd(guQuaternion *a,guQuaternion *b,guQuaternion *ab);
void c_guQuatSub(guQuaternion *a,guQuaternion *b,guQuaternion *ab);
void c_guQuatMultiply(guQuaternion *a,guQuaternion *b,guQuaternion *ab);
void c_guQuatNormalize(guQuaternion *a,guQuaternion *d);
void c_guQuatInverse(guQuaternion *a,guQuaternion *d);
void c_guQuatMtx(guQuaternion *a,Mtx m);


void ps_guQuatAdd( guQuaternion *a, guQuaternion *b, guQuaternion *ab);
void ps_guQuatSub( guQuaternion *a, guQuaternion *b, guQuaternion *ab);
void ps_guQuatMultiply( guQuaternion *a, guQuaternion *b, guQuaternion *ab);
void ps_guQuatNormalize( guQuaternion *a, guQuaternion *d);
void ps_guQuatInverse( guQuaternion *a, guQuaternion *d);


void c_guMtxIdentity(Mtx mt);
void c_guMtxCopy(Mtx src,Mtx dst);
void c_guMtxConcat(Mtx a,Mtx b,Mtx ab);
void c_guMtxScale(Mtx mt,f32 xS,f32 yS,f32 zS);
void c_guMtxScaleApply(Mtx src,Mtx dst,f32 xS,f32 yS,f32 zS);
void c_guMtxApplyScale(Mtx src,Mtx dst,f32 xS,f32 yS,f32 zS);
void c_guMtxTrans(Mtx mt,f32 xT,f32 yT,f32 zT);
void c_guMtxTransApply(Mtx src,Mtx dst,f32 xT,f32 yT,f32 zT);
void c_guMtxApplyTrans(Mtx src,Mtx dst,f32 xT,f32 yT,f32 zT);
u32 c_guMtxInverse(Mtx src,Mtx inv);
u32 c_guMtxInvXpose(Mtx src,Mtx xPose);
void c_guMtxTranspose(Mtx src,Mtx xPose);
void c_guMtxRotRad(Mtx mt,const char axis,f32 rad);
void c_guMtxRotTrig(Mtx mt,const char axis,f32 sinA,f32 cosA);
void c_guMtxRotAxisRad(Mtx mt,guVector *axis,f32 rad);
void c_guMtxReflect(Mtx m,guVector *p,guVector *n);
void c_guMtxQuat(Mtx m,guQuaternion *a);


void ps_guMtxIdentity( Mtx mt);
void ps_guMtxCopy( Mtx src, Mtx dst);
void ps_guMtxConcat( Mtx a, Mtx b, Mtx ab);
void ps_guMtxTranspose( Mtx src, Mtx xPose);
u32 ps_guMtxInverse( Mtx src, Mtx inv);
u32 ps_guMtxInvXpose( Mtx src, Mtx xPose);
void ps_guMtxScale( Mtx mt, f32 xS, f32 yS, f32 zS);
void ps_guMtxScaleApply( Mtx src, Mtx dst, f32 xS, f32 yS, f32 zS);
void ps_guMtxApplyScale( Mtx src, Mtx dst, f32 xS, f32 yS, f32 zS);
void ps_guMtxTrans( Mtx mt, f32 xT, f32 yT, f32 zT);
void ps_guMtxTransApply( Mtx src, Mtx dst, f32 xT, f32 yT, f32 zT);
void ps_guMtxApplyTrans( Mtx src, Mtx dst, f32 xT, f32 yT, f32 zT);
void ps_guMtxRotRad( Mtx mt, const char axis, f32 rad);
void ps_guMtxRotTrig( Mtx mt, const char axis, f32 sinA, f32 cosA);
void ps_guMtxRotAxisRad( Mtx mt, guVector *axis, f32 tmp0);
void ps_guMtxReflect( Mtx m, guVector *p, guVector *n);


void guMtx44Identity(Mtx44 mt);
void guMtx44Copy(Mtx44 src,Mtx44 dst);
u32 guMtx44Inverse(Mtx44 src,Mtx44 inv);
# 500 "C:/devkitPro/libogc/include/ogc/gu.h"
   }
# 52 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/gx.h" 1
# 11 "C:/devkitPro/libogc/include/ogc/gx.h"
# 1 "C:/devkitPro/libogc/include/ogc/lwp.h" 1
# 56 "C:/devkitPro/libogc/include/ogc/lwp.h"
extern "C" {






typedef u32 lwp_t;





typedef u32 lwpq_t;
# 82 "C:/devkitPro/libogc/include/ogc/lwp.h"
s32 LWP_CreateThread(lwp_t *thethread,void* (*entry)(void *),void *arg,void *stackbase,u32 stack_size,u8 prio);
# 91 "C:/devkitPro/libogc/include/ogc/lwp.h"
s32 LWP_SuspendThread(lwp_t thethread);
# 100 "C:/devkitPro/libogc/include/ogc/lwp.h"
s32 LWP_ResumeThread(lwp_t thethread);
# 109 "C:/devkitPro/libogc/include/ogc/lwp.h"
BOOL LWP_ThreadIsSuspended(lwp_t thethread);







lwp_t LWP_GetSelf(void);
# 127 "C:/devkitPro/libogc/include/ogc/lwp.h"
void LWP_SetThreadPriority(lwp_t thethread,u32 prio);







void LWP_YieldThread(void);
# 144 "C:/devkitPro/libogc/include/ogc/lwp.h"
void LWP_Reschedule(u32 prio);
# 154 "C:/devkitPro/libogc/include/ogc/lwp.h"
s32 LWP_JoinThread(lwp_t thethread,void **value_ptr);
# 163 "C:/devkitPro/libogc/include/ogc/lwp.h"
s32 LWP_InitQueue(lwpq_t *thequeue);
# 172 "C:/devkitPro/libogc/include/ogc/lwp.h"
void LWP_CloseQueue(lwpq_t thequeue);
# 181 "C:/devkitPro/libogc/include/ogc/lwp.h"
s32 LWP_ThreadSleep(lwpq_t thequeue);
# 190 "C:/devkitPro/libogc/include/ogc/lwp.h"
void LWP_ThreadSignal(lwpq_t thequeue);
# 199 "C:/devkitPro/libogc/include/ogc/lwp.h"
void LWP_ThreadBroadcast(lwpq_t thequeue);


 }
# 12 "C:/devkitPro/libogc/include/ogc/gx.h" 2

# 1 "C:/devkitPro/libogc/include/ogc/gu.h" 1
# 14 "C:/devkitPro/libogc/include/ogc/gx.h" 2
# 1165 "C:/devkitPro/libogc/include/ogc/gx.h"
   extern "C" {


typedef union _wgpipe
{
 vu8 U8;
 vs8 S8;
 vu16 U16;
 vs16 S16;
 vu32 U32;
 vs32 S32;
 vf32 F32;
} WGPipe;




typedef struct _gx_color {
  u8 r;
  u8 g;
  u8 b;
 u8 a;
} GXColor;




typedef struct _gx_colors10 {
  s16 r;
  s16 g;
  s16 b;
 s16 a;
} GXColorS10;
# 1209 "C:/devkitPro/libogc/include/ogc/gx.h"
typedef struct _gx_texobj {
 u32 val[8];
} GXTexObj;
# 1223 "C:/devkitPro/libogc/include/ogc/gx.h"
typedef struct _gx_tlutobj {
 u32 val[3];
} GXTlutObj;
# 1237 "C:/devkitPro/libogc/include/ogc/gx.h"
typedef struct _gx_texreg {
 u32 val[4];
} GXTexRegion;
# 1251 "C:/devkitPro/libogc/include/ogc/gx.h"
typedef struct _gx_tlutreg {
 u32 val[4];
} GXTlutRegion;
# 1265 "C:/devkitPro/libogc/include/ogc/gx.h"
typedef struct _gx_litobj {
 u32 val[16];
} GXLightObj;

typedef struct _vtx {
 f32 x,y,z;
 u16 s,t;
 u32 rgba;
} Vtx;







typedef struct {
 u8 attr;
 u8 type;
} GXVtxDesc;







typedef struct {
 u32 vtxattr;
 u32 comptype;
 u32 compsize;
 u32 frac;
} GXVtxAttrFmt;
# 1309 "C:/devkitPro/libogc/include/ogc/gx.h"
typedef struct {
 u8 pad[128];
} GXFifoObj;

typedef struct {
 u8 dummy[4];
} GXTexReg;




typedef struct {
 u16 r[10];
} GXFogAdjTbl;




typedef void (*GXBreakPtCallback)(void);




typedef void (*GXDrawDoneCallback)(void);





typedef void (*GXDrawSyncCallback)(u16 token);





typedef GXTexRegion* (*GXTexRegionCallback)(GXTexObj *obj,u8 mapid);





typedef GXTlutRegion* (*GXTlutRegionCallback)(u32 tlut_name);

extern WGPipe* const wgPipe;
# 1377 "C:/devkitPro/libogc/include/ogc/gx.h"
GXFifoObj* GX_Init(void *base,u32 size);
# 1407 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitFifoBase(GXFifoObj *fifo,void *base,u32 size);
# 1431 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitFifoLimits(GXFifoObj *fifo,u32 hiwatermark,u32 lowatermark);
# 1445 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitFifoPtrs(GXFifoObj *fifo,void *rd_ptr,void *wt_ptr);
# 1459 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_GetFifoPtrs(GXFifoObj *fifo,void **rd_ptr,void **wt_ptr);
# 1472 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetCPUFifo(GXFifoObj *fifo);
# 1495 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetGPFifo(GXFifoObj *fifo);
# 1505 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_GetCPUFifo(GXFifoObj *fifo);
# 1515 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_GetGPFifo(GXFifoObj *fifo);
# 1525 "C:/devkitPro/libogc/include/ogc/gx.h"
void* GX_GetFifoBase(GXFifoObj *fifo);
# 1538 "C:/devkitPro/libogc/include/ogc/gx.h"
u32 GX_GetFifoCount(GXFifoObj *fifo);
# 1548 "C:/devkitPro/libogc/include/ogc/gx.h"
u32 GX_GetFifoSize(GXFifoObj *fifo);
# 1564 "C:/devkitPro/libogc/include/ogc/gx.h"
u8 GX_GetFifoWrap(GXFifoObj *fifo);
# 1578 "C:/devkitPro/libogc/include/ogc/gx.h"
GXDrawDoneCallback GX_SetDrawDoneCallback(GXDrawDoneCallback cb);
# 1590 "C:/devkitPro/libogc/include/ogc/gx.h"
GXBreakPtCallback GX_SetBreakPtCallback(GXBreakPtCallback cb);
# 1604 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_AbortFrame(void);
# 1614 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_Flush(void);
# 1625 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetMisc(u32 token,u32 value);
# 1641 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetDrawDone(void);
# 1656 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_WaitDrawDone(void);







u16 GX_GetDrawSync(void);
# 1678 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetDrawSync(u16 token);
# 1692 "C:/devkitPro/libogc/include/ogc/gx.h"
GXDrawSyncCallback GX_SetDrawSyncCallback(GXDrawSyncCallback cb);
# 1704 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_DisableBreakPt(void);
# 1729 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_EnableBreakPt(void *break_pt);
# 1739 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_DrawDone(void);
# 1754 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_TexModeSync(void);
# 1770 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InvVtxCache(void);
# 1780 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_ClearVtxDesc(void);
# 1793 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_LoadProjectionMtx(Mtx44 mt,u8 type);
# 1815 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetViewport(f32 xOrig,f32 yOrig,f32 wd,f32 ht,f32 nearZ,f32 farZ);
# 1837 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetViewportJitter(f32 xOrig,f32 yOrig,f32 wd,f32 ht,f32 nearZ,f32 farZ,u32 field);
# 1872 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetChanCtrl(s32 channel,u8 enable,u8 ambsrc,u8 matsrc,u8 litmask,u8 diff_fn,u8 attn_fn);
# 1885 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetChanAmbColor(s32 channel,GXColor color);
# 1898 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetChanMatColor(s32 channel,GXColor color);
# 1928 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetArray(u32 attr,void *ptr,u8 stride);
# 1954 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetVtxAttrFmt(u8 vtxfmt,u32 vtxattr,u32 comptype,u32 compsize,u32 frac);
# 1969 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetVtxAttrFmtv(u8 vtxfmt,GXVtxAttrFmt *attr_list);
# 1984 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetVtxDesc(u8 attr,u8 type);
# 1998 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetVtxDescv(GXVtxDesc *attr_list);
# 2012 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_GetVtxDescv(GXVtxDesc *attr_list);
# 2037 "C:/devkitPro/libogc/include/ogc/gx.h"
u32 GX_EndDispList(void);
# 2054 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_Begin(u8 primitve,u8 vtxfmt,u16 vtxcnt);
# 2088 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_BeginDispList(void *list,u32 size);
# 2109 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_CallDispList(void *list,u32 nbytes);







static inline void GX_End(void)
{
}

static inline void GX_Position3f32(f32 x,f32 y,f32 z)
{
 wgPipe->F32 = x;
 wgPipe->F32 = y;
 wgPipe->F32 = z;
}

static inline void GX_Position3u16(u16 x,u16 y,u16 z)
{
 wgPipe->U16 = x;
 wgPipe->U16 = y;
 wgPipe->U16 = z;
}

static inline void GX_Position3s16(s16 x,s16 y,s16 z)
{
 wgPipe->S16 = x;
 wgPipe->S16 = y;
 wgPipe->S16 = z;
}

static inline void GX_Position3u8(u8 x,u8 y,u8 z)
{
 wgPipe->U8 = x;
 wgPipe->U8 = y;
 wgPipe->U8 = z;
}

static inline void GX_Position3s8(s8 x,s8 y,s8 z)
{
 wgPipe->S8 = x;
 wgPipe->S8 = y;
 wgPipe->S8 = z;
}

static inline void GX_Position2f32(f32 x,f32 y)
{
 wgPipe->F32 = x;
 wgPipe->F32 = y;
}

static inline void GX_Position2u16(u16 x,u16 y)
{
 wgPipe->U16 = x;
 wgPipe->U16 = y;
}

static inline void GX_Position2s16(s16 x,s16 y)
{
 wgPipe->S16 = x;
 wgPipe->S16 = y;
}

static inline void GX_Position2u8(u8 x,u8 y)
{
 wgPipe->U8 = x;
 wgPipe->U8 = y;
}

static inline void GX_Position2s8(s8 x,s8 y)
{
 wgPipe->S8 = x;
 wgPipe->S8 = y;
}

static inline void GX_Position1x8(u8 index)
{
 wgPipe->U8 = index;
}

static inline void GX_Position1x16(u16 index)
{
 wgPipe->U16 = index;
}

static inline void GX_Normal3f32(f32 nx,f32 ny,f32 nz)
{
 wgPipe->F32 = nx;
 wgPipe->F32 = ny;
 wgPipe->F32 = nz;
}

static inline void GX_Normal3s16(s16 nx,s16 ny,s16 nz)
{
 wgPipe->S16 = nx;
 wgPipe->S16 = ny;
 wgPipe->S16 = nz;
}

static inline void GX_Normal3s8(s8 nx,s8 ny,s8 nz)
{
 wgPipe->S8 = nx;
 wgPipe->S8 = ny;
 wgPipe->S8 = nz;
}

static inline void GX_Normal1x8(u8 index)
{
 wgPipe->U8 = index;
}

static inline void GX_Normal1x16(u16 index)
{
 wgPipe->U16 = index;
}

static inline void GX_Color4u8(u8 r,u8 g,u8 b,u8 a)
{
 wgPipe->U8 = r;
 wgPipe->U8 = g;
 wgPipe->U8 = b;
 wgPipe->U8 = a;
}

static inline void GX_Color3u8(u8 r,u8 g,u8 b)
{
 wgPipe->U8 = r;
 wgPipe->U8 = g;
 wgPipe->U8 = b;
}

static inline void GX_Color3f32(f32 r, f32 g, f32 b)
{
 wgPipe->U8 = (u8)(r * 255.0);
 wgPipe->U8 = (u8)(g * 255.0);
 wgPipe->U8 = (u8)(b * 255.0);
}

static inline void GX_Color1u32(u32 clr)
{
 wgPipe->U32 = clr;
}

static inline void GX_Color1u16(u16 clr)
{
 wgPipe->U16 = clr;
}

static inline void GX_Color1x8(u8 index)
{
 wgPipe->U8 = index;
}

static inline void GX_Color1x16(u16 index)
{
 wgPipe->U16 = index;
}

static inline void GX_TexCoord2f32(f32 s,f32 t)
{
 wgPipe->F32 = s;
 wgPipe->F32 = t;
}

static inline void GX_TexCoord2u16(u16 s,u16 t)
{
 wgPipe->U16 = s;
 wgPipe->U16 = t;
}

static inline void GX_TexCoord2s16(s16 s,s16 t)
{
 wgPipe->S16 = s;
 wgPipe->S16 = t;
}

static inline void GX_TexCoord2u8(u8 s,u8 t)
{
 wgPipe->U8 = s;
 wgPipe->U8 = t;
}

static inline void GX_TexCoord2s8(s8 s,s8 t)
{
 wgPipe->S8 = s;
 wgPipe->S8 = t;
}

static inline void GX_TexCoord1f32(f32 s)
{
 wgPipe->F32 = s;
}

static inline void GX_TexCoord1u16(u16 s)
{
 wgPipe->U16 = s;
}

static inline void GX_TexCoord1s16(s16 s)
{
 wgPipe->S16 = s;
}

static inline void GX_TexCoord1u8(u8 s)
{
 wgPipe->U8 = s;
}

static inline void GX_TexCoord1s8(s8 s)
{
 wgPipe->S8 = s;
}

static inline void GX_TexCoord1x8(u8 index)
{
 wgPipe->U8 = index;
}

static inline void GX_TexCoord1x16(u16 index)
{
 wgPipe->U16 = index;
}

static inline void GX_MatrixIndex1x8(u8 index)
{
 wgPipe->U8 = index;
}
# 2358 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_AdjustForOverscan(GXRModeObj *rmin,GXRModeObj *rmout,u16 hor,u16 ver);
# 2381 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_LoadPosMtxImm(Mtx mt,u32 pnidx);
# 2404 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_LoadPosMtxIdx(u16 mtxidx,u32 pnidx);
# 2429 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_LoadNrmMtxImm(Mtx mt,u32 pnidx);
# 2452 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_LoadNrmMtxImm3x3(Mtx33 mt,u32 pnidx);
# 2476 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_LoadNrmMtxIdx3x3(u16 mtxidx,u32 pnidx);
# 2502 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_LoadTexMtxImm(Mtx mt,u32 texidx,u8 type);
# 2527 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_LoadTexMtxIdx(u16 mtxidx,u32 texidx,u8 type);
# 2541 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetCurrentMtx(u32 mtx);
# 2558 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevOp(u8 tevstage,u8 mode);
# 2574 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevColor(u8 tev_regid,GXColor color);
# 2590 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevColorS10(u8 tev_regid,GXColorS10 color);
# 2609 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevColorIn(u8 tevstage,u8 a,u8 b,u8 c,u8 d);
# 2627 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevAlphaIn(u8 tevstage,u8 a,u8 b,u8 c,u8 d);
# 2651 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevColorOp(u8 tevstage,u8 tevop,u8 tevbias,u8 tevscale,u8 clamp,u8 tevregid);
# 2675 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevAlphaOp(u8 tevstage,u8 tevop,u8 tevbias,u8 tevscale,u8 clamp,u8 tevregid);
# 2691 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetNumTexGens(u32 nr);
# 2725 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTexCoordGen(u16 texcoord,u32 tgen_typ,u32 tgen_src,u32 mtxsrc);
# 2756 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTexCoordGen2(u16 texcoord,u32 tgen_typ,u32 tgen_src,u32 mtxsrc,u32 normalize,u32 postmtx);
# 2787 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetZTexture(u8 op,u8 fmt,u32 bias);
# 2809 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetZMode(u8 enable,u8 func,u8 update_enable);
# 2822 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetZCompLoc(u8 before_tex);
# 2836 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetLineWidth(u8 width,u8 fmt);
# 2850 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetPointSize(u8 width,u8 fmt);
# 2881 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetBlendMode(u8 type,u8 src_fact,u8 dst_fact,u8 op);
# 2895 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetCullMode(u8 mode);
# 2913 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetCoPlanar(u8 enable);
# 2931 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_EnableTexOffsets(u8 coord,u8 line_enable,u8 point_enable);
# 2945 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetClipMode(u8 mode);
# 2967 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetScissor(u32 xOrigin,u32 yOrigin,u32 wd,u32 ht);
# 2993 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetScissorBoxOffset(s32 xoffset,s32 yoffset);
# 3010 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetNumChans(u8 num);
# 3050 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevOrder(u8 tevstage,u8 texcoord,u32 texmap,u8 color);
# 3069 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetNumTevStages(u8 num);
# 3105 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetAlphaCompare(u8 comp0,u8 ref0,u8 aop,u8 comp1,u8 ref1);
# 3118 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevKColor(u8 sel, GXColor col);
# 3132 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevKColorSel(u8 tevstage,u8 sel);
# 3146 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevKAlphaSel(u8 tevstage,u8 sel);
# 3164 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevKColorS10(u8 sel, GXColorS10 col);
# 3180 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevSwapMode(u8 tevstage,u8 ras_sel,u8 tex_sel);
# 3197 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevSwapModeTable(u8 swapid,u8 r,u8 g,u8 b,u8 a);
# 3216 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevIndirect(u8 tevstage,u8 indtexid,u8 format,u8 bias,u8 mtxid,u8 wrap_s,u8 wrap_t,u8 addprev,u8 utclod,u8 a);
# 3226 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevDirect(u8 tevstage);
# 3238 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetNumIndStages(u8 nstages);
# 3250 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetIndTexOrder(u8 indtexstage,u8 texcoord,u8 texmap);
# 3264 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetIndTexCoordScale(u8 indtexid,u8 scale_s,u8 scale_t);
# 3287 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetFog(u8 type,f32 startz,f32 endz,f32 nearz,f32 farz,GXColor col);
# 3308 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetFogRangeAdj(u8 enable,u16 center,GXFogAdjTbl *table);
# 3318 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetFogColor(GXColor color);
# 3335 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitFogAdjTable(GXFogAdjTbl *table,u16 width,f32 projmtx[4][4]);
# 3355 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetIndTexMatrix(u8 indtexmtx,f32 offset_mtx[2][3],s8 scale_exp);
# 3376 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevIndBumpST(u8 tevstage,u8 indstage,u8 mtx_sel);
# 3394 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevIndBumpXYZ(u8 tevstage,u8 indstage,u8 mtx_sel);
# 3419 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevIndTile(u8 tevstage,u8 indtexid,u16 tilesize_x,u16 tilesize_y,u16 tilespacing_x,u16 tilespacing_y,u8 indtexfmt,u8 indtexmtx,u8 bias_sel,u8 alpha_sel);
# 3431 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTevIndRepeat(u8 tevstage);
# 3443 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetColorUpdate(u8 enable);
# 3458 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetAlphaUpdate(u8 enable);
# 3490 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetPixelFmt(u8 pix_fmt,u8 z_fmt);
# 3507 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetDither(u8 dither);
# 3522 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetDstAlpha(u8 enable,u8 a);
# 3538 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetFieldMask(u8 even_mask,u8 odd_mask);
# 3561 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetFieldMode(u8 field_mode,u8 half_aspect_ratio);
# 3573 "C:/devkitPro/libogc/include/ogc/gx.h"
f32 GX_GetYScaleFactor(u16 efbHeight,u16 xfbHeight);
# 3586 "C:/devkitPro/libogc/include/ogc/gx.h"
u32 GX_SetDispCopyYScale(f32 yscale);
# 3599 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetDispCopySrc(u16 left,u16 top,u16 wd,u16 ht);
# 3613 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetDispCopyDst(u16 wd,u16 ht);
# 3623 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetCopyClamp(u8 clamp);
# 3633 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetDispCopyGamma(u8 gamma);
# 3654 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetCopyFilter(u8 aa,u8 sample_pattern[12][2],u8 vf,u8 vfilter[7]);
# 3670 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetDispCopyFrame2Field(u8 mode);
# 3683 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetCopyClear(GXColor color,u32 zvalue);
# 3701 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_CopyDisp(void *dest,u8 clear);
# 3717 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTexCopySrc(u16 left,u16 top,u16 wd,u16 ht);
# 3743 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTexCopyDst(u16 wd,u16 ht,u32 fmt,u8 mipmap);
# 3757 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_CopyTex(void *dest,u8 clear);
# 3771 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_PixModeSync(void);
# 3781 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_ClearBoundingBox(void);
# 3802 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_PokeAlphaMode(u8 func,u8 threshold);
# 3814 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_PokeAlphaUpdate(u8 update_enable);
# 3824 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_PokeColorUpdate(u8 update_enable);
# 3838 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_PokeDither(u8 dither);
# 3866 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_PokeBlendMode(u8 type,u8 src_fact,u8 dst_fact,u8 op);
# 3882 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_PokeAlphaRead(u8 mode);
# 3896 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_PokeDstAlpha(u8 enable,u8 a);
# 3913 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_PokeARGB(u16 x,u16 y,GXColor color);
# 3927 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_PeekARGB(u16 x,u16 y,GXColor *color);
# 3945 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_PokeZ(u16 x,u16 y,u32 z);
# 3962 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_PeekZ(u16 x,u16 y,u32 *z);
# 3986 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_PokeZMode(u8 comp_enable,u8 func,u8 update_enable);
# 3998 "C:/devkitPro/libogc/include/ogc/gx.h"
u32 GX_GetTexObjFmt(GXTexObj *obj);
# 4010 "C:/devkitPro/libogc/include/ogc/gx.h"
u32 GX_GetTexObjMipMap(GXTexObj *obj);
# 4022 "C:/devkitPro/libogc/include/ogc/gx.h"
void* GX_GetTexObjUserData(GXTexObj *obj);
# 4034 "C:/devkitPro/libogc/include/ogc/gx.h"
void* GX_GetTexObjData(GXTexObj *obj);
# 4046 "C:/devkitPro/libogc/include/ogc/gx.h"
u8 GX_GetTexObjWrapS(GXTexObj* obj);
# 4058 "C:/devkitPro/libogc/include/ogc/gx.h"
u8 GX_GetTexObjWrapT(GXTexObj* obj);
# 4070 "C:/devkitPro/libogc/include/ogc/gx.h"
u16 GX_GetTexObjHeight(GXTexObj* obj);
# 4082 "C:/devkitPro/libogc/include/ogc/gx.h"
u16 GX_GetTexObjWidth(GXTexObj* obj);
# 4097 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_GetTexObjAll(GXTexObj* obj, void** image_ptr, u16* width, u16* height, u8* format, u8* wrap_s, u8* wrap_t, u8* mipmap);
# 4117 "C:/devkitPro/libogc/include/ogc/gx.h"
u32 GX_GetTexBufferSize(u16 wd,u16 ht,u32 fmt,u8 mipmap,u8 maxlod);
# 4129 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InvalidateTexAll(void);
# 4148 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InvalidateTexRegion(GXTexRegion *region);
# 4176 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexCacheRegion(GXTexRegion *region,u8 is32bmipmap,u32 tmem_even,u8 size_even,u32 tmem_odd,u8 size_odd);
# 4201 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexPreloadRegion(GXTexRegion *region,u32 tmem_even,u32 size_even,u32 tmem_odd,u32 size_odd);
# 4227 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexObj(GXTexObj *obj,void *img_ptr,u16 wd,u16 ht,u8 fmt,u8 wrap_s,u8 wrap_t,u8 mipmap);
# 4260 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexObjCI(GXTexObj *obj,void *img_ptr,u16 wd,u16 ht,u8 fmt,u8 wrap_s,u8 wrap_t,u8 mipmap,u32 tlut_name);
# 4271 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexObjTlut(GXTexObj *obj,u32 tlut_name);
# 4285 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexObjData(GXTexObj *obj,void *img_ptr);
# 4297 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexObjWrapMode(GXTexObj *obj,u8 wrap_s,u8 wrap_t);
# 4309 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexObjFilterMode(GXTexObj *obj,u8 minfilt,u8 magfilt);
# 4318 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexObjMinLOD(GXTexObj *obj,f32 minlod);
# 4327 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexObjMaxLOD(GXTexObj *obj,f32 maxlod);
# 4340 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexObjLODBias(GXTexObj *obj,f32 lodbias);
# 4353 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexObjBiasClamp(GXTexObj *obj,u8 biasclamp);
# 4366 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexObjEdgeLOD(GXTexObj *obj,u8 edgelod);
# 4384 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexObjMaxAniso(GXTexObj *obj,u8 maxaniso);
# 4395 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexObjUserData(GXTexObj *obj,void *userdata);
# 4414 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_LoadTexObj(GXTexObj *obj,u8 mapid);
# 4434 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_LoadTlut(GXTlutObj *obj,u32 tlut_name);
# 4457 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_LoadTexObjPreloaded(GXTexObj *obj,GXTexRegion *region,u8 mapid);
# 4475 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_PreloadEntireTexture(GXTexObj *obj,GXTexRegion *region);
# 4491 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTlutObj(GXTlutObj *obj,void *lut,u8 fmt,u16 entries);
# 4506 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTlutRegion(GXTlutRegion *region,u32 tmem_addr,u8 tlut_sz);
# 4539 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitTexObjLOD(GXTexObj *obj,u8 minfilt,u8 magfilt,f32 minlod,f32 maxlod,f32 lodbias,u8 biasclamp,u8 edgelod,u8 maxaniso);
# 4560 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTexCoordScaleManually(u8 texcoord,u8 enable,u16 ss,u16 ts);

void GX_SetTexCoordCylWrap(u8 texcoord,u8 s_enable,u8 t_enable);
# 4583 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetTexCoordBias(u8 texcoord,u8 s_enable,u8 t_enable);
# 4597 "C:/devkitPro/libogc/include/ogc/gx.h"
GXTexRegionCallback GX_SetTexRegionCallback(GXTexRegionCallback cb);
# 4616 "C:/devkitPro/libogc/include/ogc/gx.h"
GXTlutRegionCallback GX_SetTlutRegionCallback(GXTlutRegionCallback cb);
# 4639 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitLightPos(GXLightObj *lit_obj,f32 x,f32 y,f32 z);
# 4653 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitLightColor(GXLightObj *lit_obj,GXColor col);
# 4677 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitLightDir(GXLightObj *lit_obj,f32 nx,f32 ny,f32 nz);
# 4695 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_LoadLightObj(GXLightObj *lit_obj,u8 lit_id);
# 4712 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_LoadLightObjIdx(u32 litobjidx,u8 litid);
# 4740 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitLightDistAttn(GXLightObj *lit_obj,f32 ref_dist,f32 ref_brite,u8 dist_fn);
# 4778 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitLightAttn(GXLightObj *lit_obj,f32 a0,f32 a1,f32 a2,f32 k0,f32 k1,f32 k2);
# 4806 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitLightAttnA(GXLightObj *lit_obj,f32 a0,f32 a1,f32 a2);
# 4834 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitLightAttnK(GXLightObj *lit_obj,f32 k0,f32 k1,f32 k2);
# 4859 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitSpecularDirHA(GXLightObj *lit_obj,f32 nx,f32 ny,f32 nz,f32 hx,f32 hy,f32 hz);
# 4885 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitSpecularDir(GXLightObj *lit_obj,f32 nx,f32 ny,f32 nz);
# 4914 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitLightSpot(GXLightObj *lit_obj,f32 cut_off,u8 spotfn);

u32 GX_ReadClksPerVtx(void);
u32 GX_GetOverflowCount(void);
u32 GX_ResetOverflowCount(void);
# 4933 "C:/devkitPro/libogc/include/ogc/gx.h"
lwp_t GX_GetCurrentGXThread(void);
# 4951 "C:/devkitPro/libogc/include/ogc/gx.h"
lwp_t GX_SetCurrentGXThread(void);
# 4965 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_RestoreWriteGatherPipe(void);
# 4992 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetGPMetric(u32 perf0,u32 perf1);
# 5004 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_ClearGPMetric(void);
# 5014 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_InitXfRasMetric(void);
# 5031 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_ReadXfRasMetric(u32 *xfwaitin,u32 *xfwaitout,u32 *rasbusy,u32 *clks);
# 5043 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_ClearVCacheMetric(void);
# 5060 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_ReadVCacheMetric(u32 *check,u32 *miss,u32 *stall);
# 5074 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_SetVCacheMetric(u32 attr);
# 5094 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_GetGPStatus(u8 *overhi,u8 *underlow,u8 *readIdle,u8 *cmdIdle,u8 *brkpt);
# 5114 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_ReadGPMetric(u32 *cnt0,u32 *cnt1);
# 5133 "C:/devkitPro/libogc/include/ogc/gx.h"
void GX_ReadBoundingBox(u16 *top,u16 *bottom,u16 *left,u16 *right);
# 5163 "C:/devkitPro/libogc/include/ogc/gx.h"
volatile void* GX_RedirectWriteGatherPipe(void *ptr);
# 5280 "C:/devkitPro/libogc/include/ogc/gx.h"
   }
# 53 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/si.h" 1
# 66 "C:/devkitPro/libogc/include/ogc/si.h"
   extern "C" {


typedef void (*SICallback)(s32,u32);
typedef void (*RDSTHandler)(u32,void*);

u32 SI_Sync(void);
u32 SI_Busy(void);
u32 SI_IsChanBusy(s32 chan);
void SI_SetXY(u16 line,u8 cnt);
void SI_EnablePolling(u32 poll);
void SI_DisablePolling(u32 poll);
void SI_SetCommand(s32 chan,u32 cmd);
u32 SI_GetStatus(s32 chan);
u32 SI_GetResponse(s32 chan,void *buf);
u32 SI_GetResponseRaw(s32 chan);
void SI_SetSamplingRate(u32 samplingrate);
void SI_RefreshSamplingRate(void);
u32 SI_Transfer(s32 chan,void *out,u32 out_len,void *in,u32 in_len,SICallback cb,u32 us_delay);
u32 SI_DecodeType(u32 type);
u32 SI_GetTypeAsync(s32 chan,SICallback cb);
u32 SI_GetType(s32 chan);
u32 SI_Probe(s32 chan);
u32 SI_GetCommand(s32 chan);
void SI_TransferCommands(void);
u32 SI_RegisterPollingHandler(RDSTHandler handler);
u32 SI_UnregisterPollingHandler(RDSTHandler handler);
u32 SI_EnablePollingInterrupt(s32 enable);


   }
# 54 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/gx_struct.h" 1
# 55 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/irq.h" 1
# 41 "C:/devkitPro/libogc/include/ogc/irq.h"
# 1 "C:/devkitPro/libogc/include/ogc/context.h" 1
# 27 "C:/devkitPro/libogc/include/ogc/context.h"
   extern "C" {


typedef struct _excption_frame {
 u32 EXCPT_Number;
 u32 SRR0,SRR1;
 u32 GPR[32];
 u32 GQR[8];
 u32 CR, LR, CTR, XER, MSR, DAR;

 u16 state;
 u16 mode;

 f64 FPR[32];
 u64 FPSCR;
 f64 PSFPR[32];
} frame_context;


   }
# 42 "C:/devkitPro/libogc/include/ogc/irq.h" 2
# 125 "C:/devkitPro/libogc/include/ogc/irq.h"
   extern "C" {
# 134 "C:/devkitPro/libogc/include/ogc/irq.h"
typedef void (*raw_irq_handler_t)(u32 irq,void *ctx);
# 145 "C:/devkitPro/libogc/include/ogc/irq.h"
raw_irq_handler_t IRQ_Request(u32 nIrq,raw_irq_handler_t pHndl,void *pCtx);
# 154 "C:/devkitPro/libogc/include/ogc/irq.h"
raw_irq_handler_t IRQ_Free(u32 nIrq);
# 163 "C:/devkitPro/libogc/include/ogc/irq.h"
raw_irq_handler_t IRQ_GetHandler(u32 nIrq);







u32 IRQ_Disable(void);
# 180 "C:/devkitPro/libogc/include/ogc/irq.h"
void IRQ_Restore(u32 level);

void __MaskIrq(u32 nMask);
void __UnmaskIrq(u32 nMask);


   }
# 56 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/lwp.h" 1
# 57 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/mutex.h" 1
# 44 "C:/devkitPro/libogc/include/ogc/mutex.h"
 extern "C" {






typedef u32 mutex_t;
# 61 "C:/devkitPro/libogc/include/ogc/mutex.h"
s32 LWP_MutexInit(mutex_t *mutex,bool use_recursive);
# 70 "C:/devkitPro/libogc/include/ogc/mutex.h"
s32 LWP_MutexDestroy(mutex_t mutex);
# 79 "C:/devkitPro/libogc/include/ogc/mutex.h"
s32 LWP_MutexLock(mutex_t mutex);
# 88 "C:/devkitPro/libogc/include/ogc/mutex.h"
s32 LWP_MutexTryLock(mutex_t mutex);
# 97 "C:/devkitPro/libogc/include/ogc/mutex.h"
s32 LWP_MutexUnlock(mutex_t mutex);


 }
# 58 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/message.h" 1
# 52 "C:/devkitPro/libogc/include/ogc/message.h"
extern "C" {






typedef u32 mqbox_t;





typedef void* mqmsg_t;
# 76 "C:/devkitPro/libogc/include/ogc/message.h"
s32 MQ_Init(mqbox_t *mqbox,u32 count);
# 85 "C:/devkitPro/libogc/include/ogc/message.h"
void MQ_Close(mqbox_t mqbox);
# 96 "C:/devkitPro/libogc/include/ogc/message.h"
BOOL MQ_Send(mqbox_t mqbox,mqmsg_t msg,u32 flags);
# 107 "C:/devkitPro/libogc/include/ogc/message.h"
BOOL MQ_Jam(mqbox_t mqbox,mqmsg_t msg,u32 flags);
# 118 "C:/devkitPro/libogc/include/ogc/message.h"
BOOL MQ_Receive(mqbox_t mqbox,mqmsg_t *msg,u32 flags);


 }
# 59 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/semaphore.h" 1
# 45 "C:/devkitPro/libogc/include/ogc/semaphore.h"
extern "C" {






typedef u32 sem_t;
# 63 "C:/devkitPro/libogc/include/ogc/semaphore.h"
s32 LWP_SemInit(sem_t *sem,u32 start,u32 max);
# 72 "C:/devkitPro/libogc/include/ogc/semaphore.h"
s32 LWP_SemDestroy(sem_t sem);
# 81 "C:/devkitPro/libogc/include/ogc/semaphore.h"
s32 LWP_SemWait(sem_t sem);
# 90 "C:/devkitPro/libogc/include/ogc/semaphore.h"
s32 LWP_SemGetValue(sem_t sem, u32* value);







s32 LWP_SemPost(sem_t sem);


 }
# 60 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/pad.h" 1
# 43 "C:/devkitPro/libogc/include/ogc/pad.h"
   extern "C" {


typedef struct _padstatus {
 u16 button;
 s8 stickX;
 s8 stickY;
 s8 substickX;
 s8 substickY;
 u8 triggerL;
 u8 triggerR;
 u8 analogA;
 u8 analogB;
 s8 err;
} PADStatus;

typedef void (*sampling_callback)(void);




u32 PAD_Init(void);
u32 PAD_Sync(void);
u32 PAD_Read(PADStatus *status);
u32 PAD_Reset(u32 mask);
u32 PAD_Recalibrate(u32 mask);
void PAD_Clamp(PADStatus *status);
void PAD_ControlMotor(s32 chan,u32 cmd);
void PAD_SetSpec(u32 spec);

u32 PAD_ScanPads(void);

u16 PAD_ButtonsUp(int pad);
u16 PAD_ButtonsDown(int pad);
u16 PAD_ButtonsHeld(int pad);

s8 PAD_SubStickX(int pad);
s8 PAD_SubStickY(int pad);

s8 PAD_StickX(int pad);
s8 PAD_StickY(int pad);

u8 PAD_TriggerL(int pad);
u8 PAD_TriggerR(int pad);


sampling_callback PAD_SetSamplingCallback(sampling_callback cb);




   }
# 61 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/tpl.h" 1



# 1 "C:/devkitPro/libogc/include/ogc/gx.h" 1
# 5 "C:/devkitPro/libogc/include/ogc/tpl.h" 2


   extern "C" {


typedef void* FHANDLE;


typedef struct _tplfile {
 int type;
 int ntextures;
 void *texdesc;
 FHANDLE tpl_file;
} TPLFile;

s32 TPL_OpenTPLFromFile(TPLFile* tdf, const char* file_name);
s32 TPL_OpenTPLFromMemory(TPLFile* tdf, void *memory,u32 len);
s32 TPL_GetTexture(TPLFile *tdf,s32 id,GXTexObj *texObj);
s32 TPL_GetTextureCI(TPLFile *tdf,s32 id,GXTexObj *texObj,GXTlutObj *tlutObj,u8 tluts);
s32 TPL_GetTextureInfo(TPLFile *tdf,s32 id,u32 *fmt,u16 *width,u16 *height);
void TPL_CloseTPLFile(TPLFile *tdf);


   }
# 62 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/system.h" 1
# 43 "C:/devkitPro/libogc/include/ogc/system.h"
# 1 "C:/devkitPro/libogc/include/gcutil.h" 1
# 44 "C:/devkitPro/libogc/include/ogc/system.h" 2
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\time.h" 1 3
# 16 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\time.h" 3
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 17 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\time.h" 2 3


# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\time.h" 1 3
# 20 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\time.h" 2 3
# 28 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\time.h" 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\types.h" 1 3
# 28 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\types.h" 3

# 28 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\types.h" 3
typedef __uint8_t u_int8_t;


typedef __uint16_t u_int16_t;


typedef __uint32_t u_int32_t;


typedef __uint64_t u_int64_t;

typedef __intptr_t register_t;
# 49 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\types.h" 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\endian.h" 1 3





# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\_endian.h" 1 3
# 7 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\endian.h" 2 3
# 50 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\types.h" 2 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\select.h" 1 3
# 14 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\select.h" 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_sigset.h" 1 3
# 41 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_sigset.h" 3
typedef unsigned long __sigset_t;
# 15 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\select.h" 2 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_timeval.h" 1 3
# 37 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_timeval.h" 3
typedef __suseconds_t suseconds_t;




typedef __int_least64_t time_t;
# 54 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_timeval.h" 3
struct timeval {
 time_t tv_sec;
 suseconds_t tv_usec;
};
# 16 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\select.h" 2 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\timespec.h" 1 3
# 38 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\timespec.h" 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_timespec.h" 1 3
# 47 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_timespec.h" 3
struct timespec {
 time_t tv_sec;
 long tv_nsec;
};
# 39 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\timespec.h" 2 3
# 58 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\timespec.h" 3
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};
# 17 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\select.h" 2 3



typedef __sigset_t sigset_t;
# 34 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\select.h" 3
typedef unsigned long __fd_mask;

typedef __fd_mask fd_mask;
# 48 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\select.h" 3
typedef struct fd_set {
 __fd_mask __fds_bits[(((64) + ((((int)sizeof(__fd_mask) * 8)) - 1)) / (((int)sizeof(__fd_mask) * 8)))];
} fd_set;
# 74 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\select.h" 3
extern "C" {

int select (int __n, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout)
                                                   ;

int pselect (int __n, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const sigset_t *__set)

                           ;


}
# 51 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\types.h" 2 3




typedef __uint32_t in_addr_t;




typedef __uint16_t in_port_t;



typedef __uintptr_t u_register_t;






typedef unsigned char u_char;



typedef unsigned short u_short;



typedef unsigned int u_int;



typedef unsigned long u_long;







typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;



typedef __blkcnt_t blkcnt_t;




typedef __blksize_t blksize_t;




typedef unsigned long clock_t;
# 119 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\types.h" 3
typedef long daddr_t;



typedef char * caddr_t;




typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;




typedef __id_t id_t;




typedef __ino_t ino_t;
# 157 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\types.h" 3
typedef __off_t off_t;



typedef __dev_t dev_t;



typedef __uid_t uid_t;



typedef __gid_t gid_t;




typedef __pid_t pid_t;




typedef __key_t key_t;




typedef _ssize_t ssize_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __clockid_t clockid_t;





typedef __timer_t timer_t;





typedef __useconds_t useconds_t;
# 220 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\types.h" 3
typedef __int64_t sbintime_t;


# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_pthreadtypes.h" 1 3
# 23 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_pthreadtypes.h" 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\sched.h" 1 3
# 27 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\sched.h" 3
extern "C" {
# 48 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\sched.h" 3
struct sched_param {
  int sched_priority;
# 61 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\sched.h" 3
};


}
# 24 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_pthreadtypes.h" 2 3
# 32 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_pthreadtypes.h" 3
typedef __uint32_t pthread_t;
# 61 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_pthreadtypes.h" 3
typedef struct {
  int is_initialized;
  void *stackaddr;
  int stacksize;
  int contentionscope;
  int inheritsched;
  int schedpolicy;
  struct sched_param schedparam;





  int detachstate;
} pthread_attr_t;
# 154 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_pthreadtypes.h" 3
typedef __uint32_t pthread_mutex_t;

typedef struct {
  int is_initialized;
# 168 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\_pthreadtypes.h" 3
  int recursive;
} pthread_mutexattr_t;






typedef __uint32_t pthread_cond_t;



typedef struct {
  int is_initialized;
  clock_t clock;



} pthread_condattr_t;



typedef __uint32_t pthread_key_t;

typedef struct {
  int is_initialized;
  int init_executed;
} pthread_once_t;
# 224 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\types.h" 2 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\types.h" 1 3
# 225 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\types.h" 2 3
# 29 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\time.h" 2 3






extern "C" {

struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;






};

clock_t clock (void);
double difftime (time_t _time2, time_t _time1);
time_t mktime (struct tm *_timeptr);
time_t time (time_t *_timer);

char *asctime (const struct tm *_tblock);
char *ctime (const time_t *_time);
struct tm *gmtime (const time_t *_timer);
struct tm *localtime (const time_t *_timer);

size_t strftime (char * _s,
        size_t _maxsize, const char * _fmt,
        const struct tm * _t);


extern size_t strftime_l (char * _s, size_t _maxsize,
     const char * _fmt,
     const struct tm * _t, locale_t _l);


char *asctime_r (const struct tm *,
     char *);
char *ctime_r (const time_t *, char *);
struct tm *gmtime_r (const time_t *,
     struct tm *);
struct tm *localtime_r (const time_t *,
     struct tm *);

}


extern "C" {



char *strptime (const char *,
     const char *,
     struct tm *);


char *strptime_l (const char *, const char *,
    struct tm *, locale_t);



void tzset (void);

void _tzset_r (struct _reent *);
# 134 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\time.h" 3
extern long _timezone;
extern int _daylight;


extern char *_tzname[2];
# 147 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\time.h" 3
}
# 158 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\time.h" 3
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\signal.h" 1 3





# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\signal.h" 1 3





extern "C" {
# 43 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\signal.h" 3
union sigval {
  int sival_int;
  void *sival_ptr;
};

struct sigevent {
  int sigev_notify;
  int sigev_signo;
  union sigval sigev_value;






};
# 69 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\signal.h" 3
typedef struct {
  int si_signo;
  int si_code;
  union sigval si_value;
} siginfo_t;
# 120 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\signal.h" 3
typedef void (*_sig_func_ptr)(int);

struct sigaction
{
 _sig_func_ptr sa_handler;
 sigset_t sa_mask;
 int sa_flags;
};
# 154 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\signal.h" 3
typedef struct sigaltstack {
  void *ss_sp;
  int ss_flags;
  size_t ss_size;
} stack_t;






int sigprocmask (int, const sigset_t *, sigset_t *);



int pthread_sigmask (int, const sigset_t *, sigset_t *);







int kill (pid_t, int);



int killpg (pid_t, int);


int sigaction (int, const struct sigaction *, struct sigaction *);
int sigaddset (sigset_t *, const int);
int sigdelset (sigset_t *, const int);
int sigismember (const sigset_t *, int);
int sigfillset (sigset_t *);
int sigemptyset (sigset_t *);
int sigpending (sigset_t *);
int sigsuspend (const sigset_t *);
int sigwait (const sigset_t *, int *);
# 213 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\signal.h" 3
int sigpause (int) __asm__ ("" "__xpg_sigpause");
# 223 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\signal.h" 3
int sigaltstack (const stack_t *, stack_t *);



int pthread_kill (pthread_t, int);







int sigwaitinfo (const sigset_t *, siginfo_t *);
int sigtimedwait (const sigset_t *, siginfo_t *, const struct timespec *);

int sigqueue (pid_t, int, const union sigval);
# 253 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\signal.h" 3
int sig2str(int, char *);
int str2sig(const char *, int *);
# 374 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\signal.h" 3
}
# 7 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\signal.h" 2 3

extern "C" {

typedef int sig_atomic_t;

typedef _sig_func_ptr sig_t;


typedef _sig_func_ptr sighandler_t;






struct _reent;

_sig_func_ptr _signal_r (struct _reent *, int, _sig_func_ptr);
int _raise_r (struct _reent *, int);


_sig_func_ptr signal (int, _sig_func_ptr);
int raise (int);
void psignal (int, const char *);


}
# 159 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\time.h" 2 3


extern "C" {




int clock_settime (clockid_t clock_id, const struct timespec *tp);
int clock_gettime (clockid_t clock_id, struct timespec *tp);
int clock_getres (clockid_t clock_id, struct timespec *res);



int timer_create (clockid_t clock_id,
  struct sigevent * evp,
 timer_t * timerid);



int timer_delete (timer_t timerid);



int timer_settime (timer_t timerid, int flags,
 const struct itimerspec * value,
 struct itimerspec * ovalue);
int timer_gettime (timer_t timerid, struct itimerspec *value);
int timer_getoverrun (timer_t timerid);



int nanosleep (const struct timespec *rqtp, struct timespec *rmtp);


}
# 213 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\time.h" 3
extern "C" {
# 309 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\time.h" 3
}
# 45 "C:/devkitPro/libogc/include/ogc/system.h" 2
# 156 "C:/devkitPro/libogc/include/ogc/system.h"
   
# 156 "C:/devkitPro/libogc/include/ogc/system.h"
  extern "C" {







typedef u32 syswd_t;
# 180 "C:/devkitPro/libogc/include/ogc/system.h"
typedef struct _syssram syssram;

struct _syssram {
 u16 checksum;
 u16 checksum_inv;
 u32 ead0;
 u32 ead1;
 u32 counter_bias;
 s8 display_offsetH;
 u8 ntd;
 u8 lang;
 u8 flags;
};
# 206 "C:/devkitPro/libogc/include/ogc/system.h"
typedef struct _syssramex syssramex;

struct _syssramex {
 u8 flash_id[2][12];
 u32 wirelessKbd_id;
 u16 wirelessPad_id[4];
 u8 dvderr_code;
 u8 __padding0;
 u8 flashID_chksum[2];
 u16 gbs;
 u16 __padding1;
} __attribute__((packed));

typedef void (*alarmcallback)(syswd_t alarm,void *cb_arg);

typedef struct _sys_fontheader sys_fontheader;

struct _sys_fontheader {
 u16 font_type;
 u16 first_char;
 u16 last_char;
 u16 inval_char;
 u16 asc;
 u16 desc;
 u16 width;
 u16 leading;
    u16 cell_width;
    u16 cell_height;
    u32 sheet_size;
    u16 sheet_format;
    u16 sheet_column;
    u16 sheet_row;
    u16 sheet_width;
    u16 sheet_height;
    u16 width_table;
    u32 sheet_image;
    u32 sheet_fullsize;
    u8 c0;
    u8 c1;
    u8 c2;
    u8 c3;
} __attribute__((packed));

typedef void (*resetcallback)(u32 irq, void* ctx);
typedef void (*powercallback)(void);
typedef s32 (*resetfunction)(s32 final);
typedef struct _sys_resetinfo sys_resetinfo;

struct _sys_resetinfo {
 lwp_node node;
 resetfunction func;
 u32 prio;
};






void SYS_Init(void);
# 275 "C:/devkitPro/libogc/include/ogc/system.h"
void* SYS_AllocateFramebuffer(GXRModeObj *rmode);


void SYS_ProtectRange(u32 chan,void *addr,u32 bytes,u32 cntrl);
void SYS_StartPMC(u32 mcr0val,u32 mcr1val);
void SYS_DumpPMC(void);
void SYS_StopPMC(void);
void SYS_ResetPMC(void);
# 291 "C:/devkitPro/libogc/include/ogc/system.h"
s32 SYS_CreateAlarm(syswd_t *thealarm);
# 302 "C:/devkitPro/libogc/include/ogc/system.h"
s32 SYS_SetAlarm(syswd_t thealarm,const struct timespec *tp,alarmcallback cb,void *cbarg);
# 314 "C:/devkitPro/libogc/include/ogc/system.h"
s32 SYS_SetPeriodicAlarm(syswd_t thealarm,const struct timespec *tp_start,const struct timespec *tp_period,alarmcallback cb,void *cbarg);
# 323 "C:/devkitPro/libogc/include/ogc/system.h"
s32 SYS_RemoveAlarm(syswd_t thealarm);
# 332 "C:/devkitPro/libogc/include/ogc/system.h"
s32 SYS_CancelAlarm(syswd_t thealarm);

u32 SYS_GetCounterBias(void);
void SYS_SetCounterBias(u32 bias);
s8 SYS_GetDisplayOffsetH(void);
void SYS_SetDisplayOffsetH(s8 offset);
u8 SYS_GetEuRGB60(void);
void SYS_SetEuRGB60(u8 enable);
u8 SYS_GetLanguage(void);
void SYS_SetLanguage(u8 lang);
u8 SYS_GetProgressiveScan(void);
void SYS_SetProgressiveScan(u8 enable);
u8 SYS_GetSoundMode(void);
void SYS_SetSoundMode(u8 mode);
u8 SYS_GetVideoMode(void);
void SYS_SetVideoMode(u8 mode);
u16 SYS_GetWirelessID(u32 chan);
void SYS_SetWirelessID(u32 chan,u16 id);
u16 SYS_GetGBSMode(void);
void SYS_SetGBSMode(u16 mode);
u32 SYS_GetFontEncoding(void);
u32 SYS_InitFont(sys_fontheader *font_data);
void SYS_GetFontTexture(s32 c,void **image,s32 *xpos,s32 *ypos,s32 *width);
void SYS_GetFontTexel(s32 c,void *image,s32 pos,s32 stride,s32 *width);
void SYS_ResetSystem(s32 reset,u32 reset_code,s32 force_menu);
void SYS_RegisterResetFunc(sys_resetinfo *info);
void SYS_UnregisterResetFunc(sys_resetinfo *info);
void SYS_SwitchFiber(u32 arg0,u32 arg1,u32 arg2,u32 arg3,u32 pc,u32 newsp);

void* SYS_GetArena1Lo(void);
void SYS_SetArena1Lo(void *newLo);
void* SYS_GetArena1Hi(void);
void SYS_SetArena1Hi(void *newHi);
u32 SYS_GetArena1Size(void);

resetcallback SYS_SetResetCallback(resetcallback cb);

u32 SYS_ResetButtonDown(void);


u32 SYS_GetHollywoodRevision(void);
void* SYS_GetArena2Lo(void);
void SYS_SetArena2Lo(void *newLo);
void* SYS_GetArena2Hi(void);
void SYS_SetArena2Hi(void *newHi);
u32 SYS_GetArena2Size(void);
powercallback SYS_SetPowerCallback(powercallback cb);






u64 SYS_Time(void);

void kprintf(const char *str, ...);


   }
# 63 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/video.h" 1
# 42 "C:/devkitPro/libogc/include/ogc/video.h"
# 1 "C:/devkitPro/libogc/include/ogc/video_types.h" 1
# 152 "C:/devkitPro/libogc/include/ogc/video_types.h"
extern GXRModeObj TVNtsc240Ds;
extern GXRModeObj TVNtsc240DsAa;
extern GXRModeObj TVNtsc240Int;
extern GXRModeObj TVNtsc240IntAa;
extern GXRModeObj TVNtsc480Int;
extern GXRModeObj TVNtsc480IntDf;
extern GXRModeObj TVNtsc480IntAa;
extern GXRModeObj TVNtsc480Prog;
extern GXRModeObj TVNtsc480ProgSoft;
extern GXRModeObj TVNtsc480ProgAa;
extern GXRModeObj TVMpal240Ds;
extern GXRModeObj TVMpal240DsAa;
extern GXRModeObj TVMpal240Int;
extern GXRModeObj TVMpal240IntAa;
extern GXRModeObj TVMpal480Int;
extern GXRModeObj TVMpal480IntDf;
extern GXRModeObj TVMpal480IntAa;
extern GXRModeObj TVMpal480Prog;
extern GXRModeObj TVMpal480ProgSoft;
extern GXRModeObj TVMpal480ProgAa;
extern GXRModeObj TVPal264Ds;
extern GXRModeObj TVPal264DsAa;
extern GXRModeObj TVPal264Int;
extern GXRModeObj TVPal264IntAa;
extern GXRModeObj TVPal528Int;
extern GXRModeObj TVPal528IntDf;
extern GXRModeObj TVPal524IntAa;
extern GXRModeObj TVPal576IntDfScale;
extern GXRModeObj TVPal528Prog;
extern GXRModeObj TVPal528ProgSoft;
extern GXRModeObj TVPal524ProgAa;
extern GXRModeObj TVPal576ProgScale;
extern GXRModeObj TVEurgb60Hz240Ds;
extern GXRModeObj TVEurgb60Hz240DsAa;
extern GXRModeObj TVEurgb60Hz240Int;
extern GXRModeObj TVEurgb60Hz240IntAa;
extern GXRModeObj TVEurgb60Hz480Int;
extern GXRModeObj TVEurgb60Hz480IntDf;
extern GXRModeObj TVEurgb60Hz480IntAa;
extern GXRModeObj TVEurgb60Hz480Prog;
extern GXRModeObj TVEurgb60Hz480ProgSoft;
extern GXRModeObj TVEurgb60Hz480ProgAa;
# 43 "C:/devkitPro/libogc/include/ogc/video.h" 2


   extern "C" {
# 54 "C:/devkitPro/libogc/include/ogc/video.h"
typedef void (*VIRetraceCallback)(u32 retraceCnt);

typedef void (*VIPositionCallback)(u32 posX,u32 posY);

void* VIDEO_GetNextFramebuffer(void);
void* VIDEO_GetCurrentFramebuffer(void);
# 68 "C:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_Init(void);
# 77 "C:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_Flush(void);
# 88 "C:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_SetBlack(bool black);
# 97 "C:/devkitPro/libogc/include/ogc/video.h"
u32 VIDEO_GetNextField(void);
# 106 "C:/devkitPro/libogc/include/ogc/video.h"
u32 VIDEO_GetCurrentLine(void);
# 115 "C:/devkitPro/libogc/include/ogc/video.h"
u32 VIDEO_GetCurrentTvMode(void);
# 126 "C:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_Configure(GXRModeObj *rmode);

u32 VIDEO_GetFrameBufferSize(GXRModeObj *rmode);
# 140 "C:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_ClearFrameBuffer(GXRModeObj *rmode,void *fb,u32 color);
# 149 "C:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_WaitVSync(void);
# 158 "C:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_SetNextFramebuffer(void *fb);
# 167 "C:/devkitPro/libogc/include/ogc/video.h"
void VIDEO_SetNextRightFramebuffer(void *fb);
# 178 "C:/devkitPro/libogc/include/ogc/video.h"
VIRetraceCallback VIDEO_SetPreRetraceCallback(VIRetraceCallback callback);
# 189 "C:/devkitPro/libogc/include/ogc/video.h"
VIRetraceCallback VIDEO_SetPostRetraceCallback(VIRetraceCallback callback);
# 198 "C:/devkitPro/libogc/include/ogc/video.h"
u32 VIDEO_HaveComponentCable(void);

GXRModeObj * VIDEO_GetPreferredMode(GXRModeObj *mode);


   }
# 64 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/usbgecko.h" 1






   extern "C" {


void usb_flush(s32 chn);
int usb_isgeckoalive(s32 chn);
int usb_recvbuffer(s32 chn,void *buffer,int size);
int usb_sendbuffer(s32 chn,const void *buffer,int size);
int usb_recvbuffer_safe(s32 chn,void *buffer,int size);
int usb_sendbuffer_safe(s32 chn,const void *buffer,int size);
int usb_recvbuffer_ex(s32 chn,void *buffer,int size, int retries);
int usb_sendbuffer_ex(s32 chn,const void *buffer,int size, int retries);
int usb_recvbuffer_safe_ex(s32 chn,void *buffer,int size, int retries);
int usb_sendbuffer_safe_ex(s32 chn,const void *buffer,int size, int retries);
int usb_flashread(s32 chn, u32 offset, void *buffer, size_t length);
int usb_flashwrite(s32 chn, u32 offset, const void *buffer, size_t length);
int usb_flashverify(s32 chn);


   }
# 65 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/video_types.h" 1
# 66 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/texconv.h" 1
# 42 "C:/devkitPro/libogc/include/ogc/texconv.h"
   extern "C" {


void MakeTexture565(const void *src,void *dst,s32 width,s32 height);


   }
# 67 "C:/devkitPro/libogc/include/gccore.h" 2


# 1 "C:/devkitPro/libogc/include/ogc/ipc.h" 1
# 53 "C:/devkitPro/libogc/include/ogc/ipc.h"
   extern "C" {


typedef struct _ioctlv
{
 void *data;
 u32 len;
} ioctlv;

void __IPC_Reinitialize(void);

typedef s32 (*ipccallback)(s32 result,void *usrdata);

s32 iosCreateHeap(s32 size);
void* iosAlloc(s32 hid,s32 size);
void iosFree(s32 hid,void *ptr);

void* IPC_GetBufferLo(void);
void* IPC_GetBufferHi(void);
void IPC_SetBufferLo(void *bufferlo);
void IPC_SetBufferHi(void *bufferhi);

s32 IOS_Open(const char *filepath,u32 mode);
s32 IOS_OpenAsync(const char *filepath,u32 mode,ipccallback ipc_cb,void *usrdata);

s32 IOS_Close(s32 fd);
s32 IOS_CloseAsync(s32 fd,ipccallback ipc_cb,void *usrdata);

s32 IOS_Seek(s32 fd,s32 where,s32 whence);
s32 IOS_SeekAsync(s32 fd,s32 where,s32 whence,ipccallback ipc_cb,void *usrdata);
s32 IOS_Read(s32 fd,void *buf,s32 len);
s32 IOS_ReadAsync(s32 fd,void *buf,s32 len,ipccallback ipc_cb,void *usrdata);
s32 IOS_Write(s32 fd,const void *buf,s32 len);
s32 IOS_WriteAsync(s32 fd,const void *buf,s32 len,ipccallback ipc_cb,void *usrdata);

s32 IOS_Ioctl(s32 fd,s32 ioctl,void *buffer_in,s32 len_in,void *buffer_io,s32 len_io);
s32 IOS_IoctlAsync(s32 fd,s32 ioctl,void *buffer_in,s32 len_in,void *buffer_io,s32 len_io,ipccallback ipc_cb,void *usrdata);
s32 IOS_Ioctlv(s32 fd,s32 ioctl,s32 cnt_in,s32 cnt_io,ioctlv *argv);
s32 IOS_IoctlvAsync(s32 fd,s32 ioctl,s32 cnt_in,s32 cnt_io,ioctlv *argv,ipccallback ipc_cb,void *usrdata);

s32 IOS_IoctlvFormat(s32 hId,s32 fd,s32 ioctl,const char *format,...);
s32 IOS_IoctlvFormatAsync(s32 hId,s32 fd,s32 ioctl,ipccallback usr_cb,void *usr_data,const char *format,...);

s32 IOS_IoctlvReboot(s32 fd,s32 ioctl,s32 cnt_in,s32 cnt_io,ioctlv *argv);
s32 IOS_IoctlvRebootBackground(s32 fd,s32 ioctl,s32 cnt_in,s32 cnt_io,ioctlv *argv);


   }
# 70 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/es.h" 1
# 57 "C:/devkitPro/libogc/include/ogc/es.h"
   extern "C" {


typedef u32 sigtype;
typedef sigtype sig_header;
typedef sig_header signed_blob;

typedef u8 sha1[20];
typedef u8 aeskey[16];

typedef struct _sig_rsa2048 {
 sigtype type;
 u8 sig[256];
 u8 fill[60];
} __attribute__((packed)) sig_rsa2048;

typedef struct _sig_rsa4096 {
 sigtype type;
 u8 sig[512];
 u8 fill[60];
} __attribute__((packed)) sig_rsa4096;

typedef struct _sig_ecdsa {
 sigtype type;
 u8 sig[60];
 u8 fill[64];
} __attribute__((packed)) sig_ecdsa;

typedef char sig_issuer[0x40];

typedef struct _tiklimit {
 u32 tag;
 u32 value;
} __attribute__((packed)) tiklimit;

typedef struct _tikview {
 u32 view;
 u64 ticketid;
 u32 devicetype;
 u64 titleid;
 u16 access_mask;
 u8 reserved[0x3c];
 u8 cidx_mask[0x40];
 u16 padding;
 tiklimit limits[8];
} __attribute__((packed)) tikview;

typedef struct _tik {
 sig_issuer issuer;
 u8 fill[63];
 aeskey cipher_title_key;
 u8 fill2;
 u64 ticketid;
 u32 devicetype;
 u64 titleid;
 u16 access_mask;
 u8 reserved[0x3c];
 u8 cidx_mask[0x40];
 u16 padding;
 tiklimit limits[8];
} __attribute__((packed)) tik;

typedef struct _tmd_content {
 u32 cid;
 u16 index;
 u16 type;
 u64 size;
 sha1 hash;
} __attribute__((packed)) tmd_content;

typedef struct _tmd {
 sig_issuer issuer;
 u8 version;
 u8 ca_crl_version;
 u8 signer_crl_version;
 u8 vwii_title;
 u64 sys_version;
 u64 title_id;
 u32 title_type;
 u16 group_id;
 u16 zero;
 u16 region;
 u8 ratings[16];
 u8 reserved[12];
 u8 ipc_mask[12];
 u8 reserved2[18];
 u32 access_rights;
 u16 title_version;
 u16 num_contents;
 u16 boot_index;
 u16 fill2;


 tmd_content contents[];
} __attribute__((packed)) tmd;

typedef struct _tmd_view_content
{
  u32 cid;
  u16 index;
  u16 type;
  u64 size;
} __attribute__((packed)) tmd_view_content;

typedef struct _tmdview
{
 u8 version;
 u8 filler[3];
 u64 sys_version;
 u64 title_id;
 u32 title_type;
 u16 group_id;
 u8 reserved[0x3e];
 u16 title_version;
 u16 num_contents;
 tmd_view_content contents[];
}__attribute__((packed)) tmd_view;

typedef struct _cert_header {
 sig_issuer issuer;
 u32 cert_type;
 char cert_name[64];
 u32 cert_id;
} __attribute__((packed)) cert_header;

typedef struct _cert_rsa2048 {
 sig_issuer issuer;
 u32 cert_type;
 char cert_name[64];
 u32 cert_id;
 u8 modulus[256];
 u32 exponent;
 u8 pad[0x34];
} __attribute__((packed)) cert_rsa2048;

typedef struct _cert_rsa4096 {
 sig_issuer issuer;
 u32 cert_type;
 char cert_name[64];
 u32 cert_id;
 u8 modulus[512];
 u32 exponent;
 u8 pad[0x34];
} __attribute__((packed)) cert_rsa4096;

typedef struct _cert_ecdsa {
 sig_issuer issuer;
 u32 cert_type;
 char cert_name[64];
 u32 cert_id;
 u8 r[30];
 u8 s[30];
 u8 pad[0x3c];
} __attribute__((packed)) cert_ecdsa;
# 253 "C:/devkitPro/libogc/include/ogc/es.h"
s32 __ES_Init(void);
s32 __ES_Close(void);
s32 __ES_Reset(void);
s32 ES_GetTitleID(u64 *titleID);
s32 ES_SetUID(u64 uid);
s32 ES_GetDataDir(u64 titleID, char *filepath);
s32 ES_GetNumTicketViews(u64 titleID, u32 *cnt);
s32 ES_GetTicketViews(u64 titleID, tikview *views, u32 cnt);
s32 ES_GetNumOwnedTitles(u32 *cnt);
s32 ES_GetOwnedTitles(u64 *titles, u32 cnt);
s32 ES_GetNumTitles(u32 *cnt);
s32 ES_GetTitles(u64 *titles, u32 cnt);
s32 ES_GetNumStoredTMDContents(const signed_blob *stmd, u32 tmd_size, u32 *cnt);
s32 ES_GetStoredTMDContents(const signed_blob *stmd, u32 tmd_size, u32 *contents, u32 cnt);
s32 ES_GetStoredTMDSize(u64 titleID, u32 *size);
s32 ES_GetStoredTMD(u64 titleID, signed_blob *stmd, u32 size);
s32 ES_GetTitleContentsCount(u64 titleID, u32 *num);
s32 ES_GetTitleContents(u64 titleID, u8 *data, u32 size);
s32 ES_GetTMDViewSize(u64 titleID, u32 *size);
s32 ES_GetTMDView(u64 titleID, u8 *data, u32 size);
s32 ES_GetNumSharedContents(u32 *cnt);
s32 ES_GetSharedContents(sha1 *contents, u32 cnt);
s32 ES_LaunchTitle(u64 titleID, const tikview *view);
s32 ES_LaunchTitleBackground(u64 titleID, const tikview *view);
s32 ES_Identify(const signed_blob *certificates, u32 certificates_size, const signed_blob *tmd, u32 tmd_size, const signed_blob *ticket, u32 ticket_size, u32 *keyid);
s32 ES_AddTicket(const signed_blob *tik, u32 tik_size, const signed_blob *certificates, u32 certificates_size, const signed_blob *crl, u32 crl_size);
s32 ES_DeleteTicket(const tikview *view);
s32 ES_AddTitleTMD(const signed_blob *tmd, u32 tmd_size);
s32 ES_AddTitleStart(const signed_blob *tmd, u32 tmd_size, const signed_blob *certificatess, u32 certificatess_size, const signed_blob *crl, u32 crl_size);
s32 ES_AddContentStart(u64 titleID, u32 cid);
s32 ES_AddContentData(s32 cid, u8 *data, u32 data_size);
s32 ES_AddContentFinish(u32 cid);
s32 ES_AddTitleFinish(void);
s32 ES_AddTitleCancel(void);
s32 ES_ImportBoot(const signed_blob *tik, u32 tik_size,const signed_blob *tik_certs, u32 tik_certs_size,const signed_blob *tmd, u32 tmd_size,const signed_blob *tmd_certs, u32 tmd_certs_size,const u8 *content, u32 content_size);
s32 ES_OpenContent(u16 index);
s32 ES_OpenTitleContent(u64 titleID, tikview *views, u16 index);
s32 ES_ReadContent(s32 cfd, u8 *data, u32 data_size);
s32 ES_SeekContent(s32 cfd, s32 where, s32 whence);
s32 ES_CloseContent(s32 cfd);
s32 ES_DeleteTitle(u64 titleID);
s32 ES_DeleteTitleContent(u64 titleID);
s32 ES_Encrypt(u32 keynum, u8 *iv, u8 *source, u32 size, u8 *dest);
s32 ES_Decrypt(u32 keynum, u8 *iv, u8 *source, u32 size, u8 *dest);
s32 ES_Sign(u8 *source, u32 size, u8 *sig, u8 *certs);
s32 ES_GetDeviceCert(u8 *outbuf);
s32 ES_GetDeviceID(u32 *device_id);
s32 ES_GetBoot2Version(u32 *version);
signed_blob *ES_NextCert(const signed_blob *certs);


   }
# 71 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/stm.h" 1
# 47 "C:/devkitPro/libogc/include/ogc/stm.h"
   extern "C" {


typedef void (*stmcallback)(u32 event);

s32 __STM_Init(void);
s32 __STM_Close(void);
s32 STM_ShutdownToStandby(void);
s32 STM_ShutdownToIdle(void);
s32 STM_SetLedMode(u32 mode);
s32 STM_RebootSystem(void);
stmcallback STM_RegisterEventHandler(stmcallback newhandler);


   }
# 72 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/ios.h" 1
# 45 "C:/devkitPro/libogc/include/ogc/ios.h"
   extern "C" {


s32 __IOS_InitializeSubsystems(void);
s32 __IOS_ShutdownSubsystems(void);
s32 __IOS_LoadStartupIOS(void);
s32 __IOS_LaunchNewIOS(int version);
s32 IOS_GetPreferredVersion(void);
s32 IOS_ReloadIOS(int version);
s32 IOS_GetVersion(void);
s32 IOS_GetRevision(void);
s32 IOS_GetRevisionMajor(void);
s32 IOS_GetRevisionMinor(void);


   }
# 73 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/usb.h" 1
# 101 "C:/devkitPro/libogc/include/ogc/usb.h"
   extern "C" {


typedef struct _usbendpointdesc
{
 u8 bLength;
 u8 bDescriptorType;
 u8 bEndpointAddress;
 u8 bmAttributes;
 u16 wMaxPacketSize;
 u8 bInterval;
} __attribute__((packed)) usb_endpointdesc;

typedef struct _usbinterfacedesc
{
 u8 bLength;
 u8 bDescriptorType;
 u8 bInterfaceNumber;
 u8 bAlternateSetting;
 u8 bNumEndpoints;
 u8 bInterfaceClass;
 u8 bInterfaceSubClass;
 u8 bInterfaceProtocol;
 u8 iInterface;
 u8 *extra;
 u16 extra_size;
 struct _usbendpointdesc *endpoints;
} __attribute__((packed)) usb_interfacedesc;

typedef struct _usbconfdesc
{
 u8 bLength;
 u8 bDescriptorType;
 u16 wTotalLength;
 u8 bNumInterfaces;
 u8 bConfigurationValue;
 u8 iConfiguration;
 u8 bmAttributes;
 u8 bMaxPower;
 struct _usbinterfacedesc *interfaces;
} __attribute__((packed)) usb_configurationdesc;

typedef struct _usbdevdesc
{
 u8 bLength;
 u8 bDescriptorType;
 u16 bcdUSB;
 u8 bDeviceClass;
 u8 bDeviceSubClass;
 u8 bDeviceProtocol;
 u8 bMaxPacketSize0;
 u16 idVendor;
 u16 idProduct;
 u16 bcdDevice;
 u8 iManufacturer;
 u8 iProduct;
 u8 iSerialNumber;
 u8 bNumConfigurations;
 struct _usbconfdesc *configurations;
} __attribute__((packed)) usb_devdesc;

typedef struct _usbhiddesc
{
 u8 bLength;
 u8 bDescriptorType;
 u16 bcdHID;
 u8 bCountryCode;
 u8 bNumDescriptors;
 struct {
  u8 bDescriptorType;
  u16 wDescriptorLength;
 } __attribute__((packed)) descr[1];
} __attribute__((packed)) usb_hiddesc;

typedef struct _usb_device_entry {
 s32 device_id;
 u16 vid;
 u16 pid;
 u32 token;
} usb_device_entry;

typedef s32 (*usbcallback)(s32 result,void *usrdata);

s32 USB_Initialize(void);
s32 USB_Deinitialize(void);

s32 USB_OpenDevice(s32 device_id,u16 vid,u16 pid,s32 *fd);
s32 USB_CloseDevice(s32 *fd);
s32 USB_CloseDeviceAsync(s32 *fd,usbcallback cb,void *usrdata);

s32 USB_GetDescriptors(s32 fd, usb_devdesc *udd);
void USB_FreeDescriptors(usb_devdesc *udd);

s32 USB_GetGenericDescriptor(s32 fd,u8 type,u8 index,u8 interface,void *data,u32 size);
s32 USB_GetHIDDescriptor(s32 fd,u8 interface,usb_hiddesc *uhd,u32 size);
s32 USB_GetReportDescriptorSize(s32 fd, u8 interface);
s32 USB_GetReportDescriptor(s32 fd, u8 interface, void* data, u16 size);

s32 USB_GetDeviceDescription(s32 fd,usb_devdesc *devdesc);
s32 USB_DeviceRemovalNotifyAsync(s32 fd,usbcallback cb,void *userdata);
s32 USB_DeviceChangeNotifyAsync(u8 interface_class,usbcallback cb,void *userdata);

s32 USB_SuspendDevice(s32 fd);
s32 USB_ResumeDevice(s32 fd);

s32 USB_ReadIsoMsg(s32 fd,u8 bEndpoint,u8 bPackets,u16 *rpPacketSizes,void *rpData);
s32 USB_ReadIsoMsgAsync(s32 fd,u8 bEndpoint,u8 bPackets,u16 *rpPacketSizes,void *rpData,usbcallback cb,void *userdata);

s32 USB_ReadIntrMsg(s32 fd,u8 bEndpoint,u16 wLength,void *rpData);
s32 USB_ReadIntrMsgAsync(s32 fd,u8 bEndpoint,u16 wLength,void *rpData,usbcallback cb,void *usrdata);

s32 USB_ReadBlkMsg(s32 fd,u8 bEndpoint,u16 wLength,void *rpData);
s32 USB_ReadBlkMsgAsync(s32 fd,u8 bEndpoint,u16 wLength,void *rpData,usbcallback cb,void *usrdata);

s32 USB_ReadCtrlMsg(s32 fd,u8 bmRequestType,u8 bmRequest,u16 wValue,u16 wIndex,u16 wLength,void *rpData);
s32 USB_ReadCtrlMsgAsync(s32 fd,u8 bmRequestType,u8 bmRequest,u16 wValue,u16 wIndex,u16 wLength,void *rpData,usbcallback cb,void *usrdata);

s32 USB_WriteIsoMsg(s32 fd,u8 bEndpoint,u8 bPackets,u16 *rpPacketSizes,void *rpData);
s32 USB_WriteIsoMsgAsync(s32 fd,u8 bEndpoint,u8 bPackets,u16 *rpPacketSizes,void *rpData,usbcallback cb,void *userdata);

s32 USB_WriteIntrMsg(s32 fd,u8 bEndpoint,u16 wLength,void *rpData);
s32 USB_WriteIntrMsgAsync(s32 fd,u8 bEndpoint,u16 wLength,void *rpData,usbcallback cb,void *usrdata);

s32 USB_WriteBlkMsg(s32 fd,u8 bEndpoint,u16 wLength,void *rpData);
s32 USB_WriteBlkMsgAsync(s32 fd,u8 bEndpoint,u16 wLength,void *rpData,usbcallback cb,void *usrdata);

s32 USB_WriteCtrlMsg(s32 fd,u8 bmRequestType,u8 bmRequest,u16 wValue,u16 wIndex,u16 wLength,void *rpData);
s32 USB_WriteCtrlMsgAsync(s32 fd,u8 bmRequestType,u8 bmRequest,u16 wValue,u16 wIndex,u16 wLength,void *rpData,usbcallback cb,void *usrdata);

s32 USB_GetConfiguration(s32 fd, u8 *configuration);
s32 USB_SetConfiguration(s32 fd, u8 configuration);
s32 USB_SetAlternativeInterface(s32 fd, u8 interface, u8 alternateSetting);
s32 USB_ClearHalt(s32 fd, u8 endpointAddress);
s32 USB_GetDeviceList(usb_device_entry *descr_buffer,u8 num_descr,u8 interface_class,u8 *cnt_descr);

s32 USB_GetAsciiString(s32 fd,u8 bIndex,u16 wLangID,u16 wLength,void *rpData);


   }
# 74 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/isfs.h" 1
# 19 "C:/devkitPro/libogc/include/ogc/isfs.h"
   extern "C" {


typedef struct _fstats
{
 u32 file_length;
 u32 file_pos;
} fstats;

typedef s32 (*isfscallback)(s32 result,void *usrdata);

s32 ISFS_Initialize(void);
s32 ISFS_Deinitialize(void);

s32 ISFS_Format(void);
s32 ISFS_FormatAsync(isfscallback cb,void *usrdata);
s32 ISFS_Open(const char *filepath,u8 mode);
s32 ISFS_OpenAsync(const char *filepath,u8 mode,isfscallback cb,void *usrdata);
s32 ISFS_Close(s32 fd);
s32 ISFS_CloseAsync(s32 fd,isfscallback cb,void *usrdata);
s32 ISFS_Delete(const char *filepath);
s32 ISFS_DeleteAsync(const char *filepath,isfscallback cb,void *usrdata);
s32 ISFS_ReadDir(const char *filepath,char *name_list,u32 *num);
s32 ISFS_ReadDirAsync(const char *filepath,char *name_list,u32 *num,isfscallback cb,void *usrdata);
s32 ISFS_CreateFile(const char *filepath,u8 attributes,u8 owner_perm,u8 group_perm,u8 other_perm);
s32 ISFS_CreateFileAsync(const char *filepath,u8 attributes,u8 owner_perm,u8 group_perm,u8 other_perm,isfscallback cb,void *usrdata);
s32 ISFS_Write(s32 fd,const void *buffer,u32 length);
s32 ISFS_WriteAsync(s32 fd,const void *buffer,u32 length,isfscallback cb,void *usrdata);
s32 ISFS_Read(s32 fd,void *buffer,u32 length);
s32 ISFS_ReadAsync(s32 fd,void *buffer,u32 length,isfscallback cb,void *usrdata);
s32 ISFS_Seek(s32 fd,s32 where,s32 whence);
s32 ISFS_SeekAsync(s32 fd,s32 where,s32 whence,isfscallback cb,void *usrdata);
s32 ISFS_CreateDir(const char *filepath,u8 attributes,u8 owner_perm,u8 group_perm,u8 other_perm);
s32 ISFS_CreateDirAsync(const char *filepath,u8 attributes,u8 owner_perm,u8 group_perm,u8 other_perm,isfscallback cb,void *usrdata);
s32 ISFS_GetStats(void *stats);
s32 ISFS_GetStatsAsync(void *stats,isfscallback cb,void *usrdata);
s32 ISFS_GetFileStats(s32 fd,fstats *status);
s32 ISFS_GetFileStatsAsync(s32 fd,fstats *status,isfscallback cb,void *usrdata);
s32 ISFS_GetAttr(const char *filepath,u32 *ownerID,u16 *groupID,u8 *attributes,u8 *ownerperm,u8 *groupperm,u8 *otherperm);
s32 ISFS_GetAttrAsync(const char *filepath,u32 *ownerID,u16 *groupID,u8 *attributes,u8 *ownerperm,u8 *groupperm,u8 *otherperm,isfscallback cb,void *usrdata);
s32 ISFS_Rename(const char *filepathOld,const char *filepathNew);
s32 ISFS_RenameAsync(const char *filepathOld,const char *filepathNew,isfscallback cb,void *usrdata);
s32 ISFS_SetAttr(const char *filepath,u32 ownerID,u16 groupID,u8 attributes,u8 ownerperm,u8 groupperm,u8 otherperm);
s32 ISFS_SetAttrAsync(const char *filepath,u32 ownerID,u16 groupID,u8 attributes,u8 ownerperm,u8 groupperm,u8 otherperm,isfscallback cb,void *usrdata);
s32 ISFS_GetUsage(const char* filepath, u32* usage1, u32* usage2);
s32 ISFS_GetUsageAsync(const char* filepath, u32* usage1, u32* usage2,isfscallback cb,void *usrdata);


   }
# 75 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/conf.h" 1
# 47 "C:/devkitPro/libogc/include/ogc/conf.h"
   extern "C" {


enum {
 CONF_BIGARRAY = 1,
 CONF_SMALLARRAY,
 CONF_BYTE,
 CONF_SHORT,
 CONF_LONG,
 CONF_BOOL = 7
};

enum {
 CONF_VIDEO_NTSC = 0,
 CONF_VIDEO_PAL,
 CONF_VIDEO_MPAL
};

enum {
 CONF_REGION_JP = 0,
 CONF_REGION_US = 1,
 CONF_REGION_EU = 2,
 CONF_REGION_KR = 4,
 CONF_REGION_CN = 5
};

enum {
 CONF_AREA_JPN = 0,
 CONF_AREA_USA,
 CONF_AREA_EUR,
 CONF_AREA_AUS,
 CONF_AREA_BRA,
 CONF_AREA_TWN,
 CONF_AREA_ROC,
 CONF_AREA_KOR,
 CONF_AREA_HKG,
 CONF_AREA_ASI,
 CONF_AREA_LTN,
 CONF_AREA_SAF,
 CONF_AREA_CHN
};

enum {
 CONF_SHUTDOWN_STANDBY = 0,
 CONF_SHUTDOWN_IDLE
};

enum {
 CONF_LED_OFF = 0,
 CONF_LED_DIM,
 CONF_LED_BRIGHT
};

enum {
 CONF_SOUND_MONO = 0,
 CONF_SOUND_STEREO,
 CONF_SOUND_SURROUND
};

enum {
 CONF_LANG_JAPANESE = 0,
 CONF_LANG_ENGLISH,
 CONF_LANG_GERMAN,
 CONF_LANG_FRENCH,
 CONF_LANG_SPANISH,
 CONF_LANG_ITALIAN,
 CONF_LANG_DUTCH,
 CONF_LANG_SIMP_CHINESE,
 CONF_LANG_TRAD_CHINESE,
 CONF_LANG_KOREAN
};

enum {
 CONF_ASPECT_4_3 = 0,
 CONF_ASPECT_16_9
};

enum {
 CONF_SENSORBAR_BOTTOM = 0,
 CONF_SENSORBAR_TOP
};




typedef struct _conf_pad_device conf_pad_device;

struct _conf_pad_device {
 u8 bdaddr[6];
 char name[0x40];
} __attribute__((packed));

typedef struct _conf_pads conf_pads;

struct _conf_pads {
 u8 num_registered;
 conf_pad_device registered[10];
 conf_pad_device active[4];
 conf_pad_device balance_board;
 conf_pad_device unknown;
} __attribute__((packed));

s32 CONF_Init(void);
s32 CONF_GetLength(const char *name);
s32 CONF_GetType(const char *name);
s32 CONF_Get(const char *name, void *buffer, u32 length);
s32 CONF_GetShutdownMode(void);
s32 CONF_GetIdleLedMode(void);
s32 CONF_GetProgressiveScan(void);
s32 CONF_GetEuRGB60(void);
s32 CONF_GetIRSensitivity(void);
s32 CONF_GetSensorBarPosition(void);
s32 CONF_GetPadSpeakerVolume(void);
s32 CONF_GetPadMotorMode(void);
s32 CONF_GetSoundMode(void);
s32 CONF_GetLanguage(void);
s32 CONF_GetCounterBias(u32 *bias);
s32 CONF_GetScreenSaverMode(void);
s32 CONF_GetDisplayOffsetH(s8 *offset);
s32 CONF_GetPadDevices(conf_pads *pads);
s32 CONF_GetNickName(u8 *nickname);
s32 CONF_GetAspectRatio(void);
s32 CONF_GetEULA(void);
s32 CONF_GetParentalPassword(s8 *password);
s32 CONF_GetParentalAnswer(s8 *answer);
s32 CONF_GetWiiConnect24(void);
s32 CONF_GetRegion(void);
s32 CONF_GetArea(void);
s32 CONF_GetVideo(void);


   }
# 76 "C:/devkitPro/libogc/include/gccore.h" 2
# 1 "C:/devkitPro/libogc/include/ogc/usbstorage.h" 1






# 1 "C:/devkitPro/libogc/include/ogc/mutex.h" 1
# 8 "C:/devkitPro/libogc/include/ogc/usbstorage.h" 2

# 1 "C:/devkitPro/libogc/include/ogc/system.h" 1
# 10 "C:/devkitPro/libogc/include/ogc/usbstorage.h" 2


   extern "C" {
# 28 "C:/devkitPro/libogc/include/ogc/usbstorage.h"
typedef struct
{
 u8 configuration;
 u32 interface;
 u32 altInterface;
 u8 bInterfaceSubClass;

 u8 ep_in;
 u8 ep_out;

 u8 max_lun;
 u32 *sector_size;

 s32 usb_fd;

 mutex_t lock;
 syswd_t alarm;
 s32 retval;

 u32 tag;
 u8 suspended;

 u8 *buffer;
} usbstorage_handle;




typedef struct {
   uint8_t command[16];
   uint8_t command_length;
   uint8_t flags;
   uint8_t scsi_status;
   void* data;
   size_t data_length;
} raw_device_command;

s32 USBStorage_Initialize(void);
void USBStorage_Deinitialize(void);

s32 USBStorage_Open(usbstorage_handle *dev, s32 device_id, u16 vid, u16 pid);
s32 USBStorage_Close(usbstorage_handle *dev);
s32 USBStorage_Reset(usbstorage_handle *dev);

s32 USBStorage_GetMaxLUN(usbstorage_handle *dev);
s32 USBStorage_MountLUN(usbstorage_handle *dev, u8 lun);
s32 USBStorage_Suspend(usbstorage_handle *dev);
s32 USBStorage_IsDVD(void);
s32 USBStorage_ioctl(int request, ...);

s32 USBStorage_ReadCapacity(usbstorage_handle *dev, u8 lun, u32 *sector_size, u32 *n_sectors);
s32 USBStorage_Read(usbstorage_handle *dev, u8 lun, u32 sector, u16 n_sectors, u8 *buffer);
s32 USBStorage_Write(usbstorage_handle *dev, u8 lun, u32 sector, u16 n_sectors, const u8 *buffer);
s32 USBStorage_StartStop(usbstorage_handle *dev, u8 lun, u8 lo_ej, u8 start, u8 imm);



extern DISC_INTERFACE __io_usbstorage;


   }
# 77 "C:/devkitPro/libogc/include/gccore.h" 2

# 1 "C:/devkitPro/libogc/include/ogc/wiilaunch.h" 1
# 62 "C:/devkitPro/libogc/include/ogc/wiilaunch.h"
   extern "C" {


s32 WII_Initialize(void);
s32 WII_ReturnToMenu(void);
s32 WII_ReturnToSettings(void);
s32 WII_ReturnToSettingsPage(const char *page);
s32 WII_LaunchTitle(u64 titleID);
s32 WII_LaunchTitleWithArgs(u64 titleID, int launchcode, ...);
s32 WII_OpenURL(const char *url);


   }
# 79 "C:/devkitPro/libogc/include/gccore.h" 2
# 99 "C:/devkitPro/libogc/include/gccore.h"
   extern "C" {
# 141 "C:/devkitPro/libogc/include/gccore.h"
s32 depackrnc1_ulen(void *packed);
s32 depackrnc1(void *packed,void *unpacked);

void depackrnc2(void *packed,void *unpacked);


   }
# 46 "C:/devkitPro/libogc/include/grrlib.h" 2






   extern "C" {
# 81 "C:/devkitPro/libogc/include/grrlib.h"
typedef enum GRRLIB_blendMode {
    GRRLIB_BLEND_ALPHA = 0,
    GRRLIB_BLEND_ADD = 1,
    GRRLIB_BLEND_SCREEN = 2,
    GRRLIB_BLEND_MULTI = 3,
    GRRLIB_BLEND_INV = 4,
} GRRLIB_blendMode;
# 97 "C:/devkitPro/libogc/include/grrlib.h"
typedef struct GRRLIB_drawSettings {
    bool antialias;
    GRRLIB_blendMode blend;
    int lights;
} GRRLIB_drawSettings;





typedef struct GRRLIB_texImg {
    u32 w;
    u32 h;
    int handlex;
    int handley;
    int offsetx;
    int offsety;

    bool tiledtex;
    u32 tilew;
    u32 tileh;
    u32 nbtilew;
    u32 nbtileh;
    u32 tilestart;
    f32 ofnormaltexx;
    f32 ofnormaltexy;

    void *data;
} GRRLIB_texImg;





typedef struct GRRLIB_bytemapChar {
    u8 width;
    u8 height;
    s8 relx;
    s8 rely;
    u8 kerning;
    u8 *data;
} GRRLIB_bytemapChar;





typedef struct GRRLIB_bytemapFont {
    char *name;
    u32 *palette;
    u16 nbChar;
    u8 version;
    s8 tracking;

    GRRLIB_bytemapChar charDef[256];
} GRRLIB_bytemapFont;





typedef struct GRRLIB_Font {
    void *face;
    bool kerning;
} GRRLIB_ttfFont;
# 176 "C:/devkitPro/libogc/include/grrlib.h"
extern GXRModeObj *rmode;
extern void *xfb[2] ;
extern u32 fb ;




# 1 "C:/devkitPro/libogc/include/grrlib/GRRLIB__lib.h" 1
# 46 "C:/devkitPro/libogc/include/grrlib/GRRLIB__lib.h"
GRRLIB_bytemapFont* GRRLIB_LoadBMF (const u8 my_bmf[] );
void GRRLIB_FreeBMF (GRRLIB_bytemapFont *bmf);

void GRRLIB_InitTileSet (GRRLIB_texImg *tex,
                           const u32 tilew, const u32 tileh,
                           const u32 tilestart);



void GRRLIB_BMFX_FlipH (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest);

void GRRLIB_BMFX_FlipV (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest);

void GRRLIB_BMFX_Grayscale (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest);

void GRRLIB_BMFX_Sepia (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest);

void GRRLIB_BMFX_Invert (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest);

void GRRLIB_BMFX_Blur (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest, const u32 factor);

void GRRLIB_BMFX_Scatter (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest, const u32 factor);

void GRRLIB_BMFX_Pixelate (const GRRLIB_texImg *texsrc,
                             GRRLIB_texImg *texdest, const u32 factor);



int GRRLIB_Init (void);
void GRRLIB_Exit (void);



void GRRLIB_Ellipse (const f32 x, const f32 y, const f32 radiusX,
                      const f32 radiusY, const u32 color, const u8 filled);
void GRRLIB_Circle (const f32 x, const f32 y, const f32 radius,
                     const u32 color, const u8 filled);



int GRRLIB_LoadFile (const char* filename, u8* *data);
GRRLIB_texImg* GRRLIB_LoadTextureFromFile (const char* filename);
GRRLIB_ttfFont* GRRLIB_LoadTTFFromFile (const char* filename);
bool GRRLIB_ScrShot (const char* filename);



void GRRLIB_Printf (const f32 xpos, const f32 ypos,
                       const GRRLIB_texImg *tex, const u32 color,
                       const f32 zoom, const char *text, ...);

void GRRLIB_PrintBMF (const f32 xpos, const f32 ypos,
                       const GRRLIB_bytemapFont *bmf,
                       const char *text, ...);



void GRRLIB_DrawImg (const f32 xpos, const f32 ypos, const GRRLIB_texImg *tex,
                       const f32 degrees, const f32 scaleX, const f32 scaleY,
                       const u32 color);

void GRRLIB_DrawImgQuad (const guVector pos[4], GRRLIB_texImg *tex,
                           const u32 color);

void GRRLIB_DrawTile (const f32 xpos, const f32 ypos, const GRRLIB_texImg *tex,
                       const f32 degrees, const f32 scaleX, const f32 scaleY,
                       const u32 color, const int frame);

void GRRLIB_DrawPart (const f32 xpos, const f32 ypos, const f32 partx, const f32 party,
                       const f32 partw, const f32 parth, const GRRLIB_texImg *tex,
                       const f32 degrees, const f32 scaleX, const f32 scaleY,
                       const u32 color);

void GRRLIB_DrawTileQuad (const guVector pos[4], GRRLIB_texImg *tex, const u32 color, const int frame);

void GRRLIB_Render (void);



void GRRLIB_Screen2Texture (int posx, int posy, GRRLIB_texImg *tex, bool clear);
void GRRLIB_CompoStart (void);
void GRRLIB_CompoEnd(int posx, int posy, GRRLIB_texImg *tex);



GRRLIB_texImg* GRRLIB_CreateEmptyTexture (const u32 width, const u32 height);
GRRLIB_texImg* GRRLIB_LoadTexture (const u8 *my_img);
GRRLIB_texImg* GRRLIB_LoadTexturePNG (const u8 *my_png);
GRRLIB_texImg* GRRLIB_LoadTextureJPG (const u8 *my_jpg);
GRRLIB_texImg* GRRLIB_LoadTextureJPGEx (const u8 *my_jpg, const int my_size);
GRRLIB_texImg* GRRLIB_LoadTextureBMP (const u8 *my_bmp);



bool GRRLIB_GeckoInit();
void GRRLIB_GeckoPrintf (const char *text, ...);



void GRRLIB_SetBackgroundColour(u8 r, u8 g, u8 b, u8 a);
void GRRLIB_Camera3dSettings(f32 posx, f32 posy, f32 posz, f32 upx, f32 upy, f32 upz, f32 lookx, f32 looky, f32 lookz);
void GRRLIB_3dMode(f32 minDist, f32 maxDist, f32 fov, bool texturemode, bool normalmode);
void GRRLIB_2dMode();
void GRRLIB_ObjectViewBegin(void);
void GRRLIB_ObjectViewScale(f32 scalx, f32 scaly, f32 scalz);
void GRRLIB_ObjectViewRotate(f32 angx, f32 angy, f32 angz);
void GRRLIB_ObjectViewTrans(f32 posx, f32 posy, f32 posz);
void GRRLIB_ObjectViewEnd(void);
void GRRLIB_ObjectView(f32 posx, f32 posy, f32 posz, f32 angx, f32 angy, f32 angz, f32 scalx, f32 scaly, f32 scalz);
void GRRLIB_ObjectViewInv(f32 posx, f32 posy, f32 posz, f32 angx, f32 angy, f32 angz, f32 scalx, f32 scaly, f32 scalz);
void GRRLIB_SetTexture(GRRLIB_texImg *tex, bool rep);
void GRRLIB_DrawTorus(f32 r, f32 R, int nsides, int rings, bool filled, u32 col);
void GRRLIB_DrawSphere(f32 r, int lats, int longs, bool filled, u32 col);
void GRRLIB_DrawCube(f32 size, bool filled, u32 col);
void GRRLIB_DrawCylinder(f32 r, f32 h, int d, bool filled, u32 col);
void GRRLIB_DrawCone(f32 r, f32 h, int d, bool filled, u32 col);
void GRRLIB_DrawTessPanel(f32 w, f32 wstep, f32 h, f32 hstep, bool filled, u32 col);
void GRRLIB_SetLightAmbient(u32 ambientcolor);
void GRRLIB_SetLightDiff(u8 num, guVector pos, f32 distattn, f32 brightness, u32 lightcolor);
void GRRLIB_SetLightSpec(u8 num, guVector dir, f32 shininess, u32 lightcolor, u32 speccolor);
void GRRLIB_SetLightSpot(u8 num, guVector pos, guVector lookat, f32 angAttn0, f32 angAttn1, f32 angAttn2, f32 distAttn0, f32 distAttn1, f32 distAttn2, u32 lightcolor);
void GRRLIB_SetLightOff(void);



GRRLIB_ttfFont* GRRLIB_LoadTTF(const u8* file_base, s32 file_size);
void GRRLIB_FreeTTF(GRRLIB_ttfFont *myFont);
void GRRLIB_PrintfTTF(int x, int y, GRRLIB_ttfFont *myFont, const char *string, unsigned int fontSize, const u32 color);
void GRRLIB_PrintfTTFW(int x, int y, GRRLIB_ttfFont *myFont, const wchar_t *string, unsigned int fontSize, const u32 color);
u32 GRRLIB_WidthTTF(GRRLIB_ttfFont *myFont, const char *, unsigned int);
u32 GRRLIB_WidthTTFW(GRRLIB_ttfFont *myFont, const wchar_t *, unsigned int);
# 184 "C:/devkitPro/libogc/include/grrlib.h" 2






# 1 "C:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 1
# 46 "C:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h"
static inline void GRRLIB_ClipReset (void);
static inline void GRRLIB_ClipDrawing (const int x, const int y,
                                  const int width, const int height);



static inline bool GRRLIB_PtInRect (const int hotx, const int hoty,
                                 const int hotw, const int hoth,
                                 const int wpadx, const int wpady);

static inline bool GRRLIB_RectInRect (const int rect1x, const int rect1y,
                                 const int rect1w, const int rect1h,
                                 const int rect2x, const int rect2y,
                                 const int rect2w, const int rect2h);

static inline bool GRRLIB_RectOnRect (const int rect1x, const int rect1y,
                                 const int rect1w, const int rect1h,
                                 const int rect2x, const int rect2y,
                                 const int rect2w, const int rect2h);



static inline void GRRLIB_NPlot (const guVector v[], const u32 color[],
                                  const long n);
static inline void GRRLIB_NGone (const guVector v[], const u32 color[],
                                  const long n);
static inline void GRRLIB_NGoneFilled (const guVector v[], const u32 color[],
                                  const long n);



static inline void GRRLIB_GXEngine (const guVector v[], const u32 color[],
                               const long n, const u8 fmt);



static inline void GRRLIB_FillScreen (const u32 color);
static inline void GRRLIB_Plot (const f32 x, const f32 y, const u32 color);
static inline void GRRLIB_Line (const f32 x1, const f32 y1,
                                 const f32 x2, const f32 y2, const u32 color);
static inline void GRRLIB_Rectangle (const f32 x, const f32 y,
                                 const f32 width, const f32 height,
                                 const u32 color, const bool filled);



static inline void GRRLIB_SetHandle (GRRLIB_texImg *tex, const int x, const int y);
static inline void GRRLIB_SetMidHandle (GRRLIB_texImg *tex, const bool enabled);



static inline u32 GRRLIB_GetPixelFromtexImg (const int x, const int y,
                                         const GRRLIB_texImg *tex);

static inline void GRRLIB_SetPixelTotexImg (const int x, const int y,
                                         GRRLIB_texImg *tex, const u32 color);

static inline u32 GRRLIB_GetPixelFromFB (int x, int y);
static inline void GRRLIB_SetPixelToFB (int x, int y, u32 pokeColor);



static inline void GRRLIB_SetBlend (const GRRLIB_blendMode blendmode);
static inline GRRLIB_blendMode GRRLIB_GetBlend (void);
static inline void GRRLIB_SetAntiAliasing (const bool aa);
static inline bool GRRLIB_GetAntiAliasing (void);



static inline void GRRLIB_ClearTex (GRRLIB_texImg* tex);
static inline void GRRLIB_FlushTex (GRRLIB_texImg *tex);
static inline void GRRLIB_FreeTexture (GRRLIB_texImg *tex);




# 1 "C:/devkitPro/libogc/include/grrlib/GRRLIB_clipping.h" 1
# 31 "C:/devkitPro/libogc/include/grrlib/GRRLIB_clipping.h"
static inline
void GRRLIB_ClipReset (void) {
    GX_SetClipMode( 0 );
    GX_SetScissor( 0, 0, rmode->fbWidth, rmode->efbHeight );
}
# 44 "C:/devkitPro/libogc/include/grrlib/GRRLIB_clipping.h"
static inline
void GRRLIB_ClipDrawing (const int x, const int y,
                          const int width, const int height) {
    GX_SetClipMode( 0 );
    GX_SetScissor( x, y, width, height );
}
# 123 "C:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "C:/devkitPro/libogc/include/grrlib/GRRLIB_collision.h" 1
# 38 "C:/devkitPro/libogc/include/grrlib/GRRLIB_collision.h"
static inline
bool GRRLIB_PtInRect (const int hotx, const int hoty,
                       const int hotw, const int hoth,
                       const int wpadx, const int wpady) {
    return( ((wpadx>=hotx) && (wpadx<=(hotx+hotw))) &&
            ((wpady>=hoty) && (wpady<=(hoty+hoth))) );
}
# 58 "C:/devkitPro/libogc/include/grrlib/GRRLIB_collision.h"
static inline
bool GRRLIB_RectInRect (const int rect1x, const int rect1y,
                         const int rect1w, const int rect1h,
                         const int rect2x, const int rect2y,
                         const int rect2w, const int rect2h) {
    return ( (rect1x >= rect2x) && (rect1y >= rect2y) &&
             (rect1x+rect1w <= rect2x+rect2w) &&
             (rect1y+rect1h <= rect2y+rect2h) );
}
# 80 "C:/devkitPro/libogc/include/grrlib/GRRLIB_collision.h"
static inline
bool GRRLIB_RectOnRect (const int rect1x, const int rect1y,
                         const int rect1w, const int rect1h,
                         const int rect2x, const int rect2y,
                         const int rect2w, const int rect2h) {
    return GRRLIB_PtInRect(rect1x, rect1y, rect1w, rect1h, rect2x, rect2y) ||
           GRRLIB_PtInRect(rect1x, rect1y, rect1w, rect1h, rect2x+rect2w, rect2y) ||
           GRRLIB_PtInRect(rect1x, rect1y, rect1w, rect1h, rect2x+rect2w, rect2y+rect2h) ||
           GRRLIB_PtInRect(rect1x, rect1y, rect1w, rect1h, rect2x, rect2y+rect2h);
}
# 124 "C:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "C:/devkitPro/libogc/include/grrlib/GRRLIB_fbComplex.h" 1
# 34 "C:/devkitPro/libogc/include/grrlib/GRRLIB_fbComplex.h"
static inline
void GRRLIB_NPlot (const guVector v[], const u32 color[], const long n) {
    GRRLIB_GXEngine(v, color, n, 0xB8);
}







static inline
void GRRLIB_NGone (const guVector v[], const u32 color[], const long n) {
    GRRLIB_GXEngine(v, color, n, 0xB0);
}







static inline
void GRRLIB_NGoneFilled (const guVector v[], const u32 color[], const long n) {
    GRRLIB_GXEngine(v, color, n, 0xA0);
}
# 125 "C:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "C:/devkitPro/libogc/include/grrlib/GRRLIB_fbGX.h" 1
# 35 "C:/devkitPro/libogc/include/grrlib/GRRLIB_fbGX.h"
static inline
void GRRLIB_GXEngine (const guVector v[], const u32 color[], const long n,
                       const u8 fmt) {
    GX_Begin(fmt, 0, n);
    for (int i = 0; i < n; i++) {
        GX_Position3f32(v[i].x, v[i].y, v[i].z);
        GX_Color1u32(color[i]);
    }
    GX_End();
}
# 126 "C:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "C:/devkitPro/libogc/include/grrlib/GRRLIB_fbSimple.h" 1
# 32 "C:/devkitPro/libogc/include/grrlib/GRRLIB_fbSimple.h"
static inline
void GRRLIB_FillScreen (const u32 color) {
    GRRLIB_Rectangle(-40.0f, -40.0f, rmode->fbWidth + 80.0f, rmode->xfbHeight + 80.0f, color, true);
}
# 44 "C:/devkitPro/libogc/include/grrlib/GRRLIB_fbSimple.h"
static inline
void GRRLIB_Plot (const f32 x, const f32 y, const u32 color) {
    GX_Begin(0xB8, 0, 1);
        GX_Position3f32(x, y, 0.0f);
        GX_Color1u32(color);
    GX_End();
}
# 61 "C:/devkitPro/libogc/include/grrlib/GRRLIB_fbSimple.h"
static inline
void GRRLIB_Line (const f32 x1, const f32 y1,
                   const f32 x2, const f32 y2, const u32 color) {
    GX_Begin(0xA8, 0, 2);
        GX_Position3f32(x1, y1, 0.0f);
        GX_Color1u32(color);
        GX_Position3f32(x2, y2, 0.0f);
        GX_Color1u32(color);
    GX_End();
}
# 81 "C:/devkitPro/libogc/include/grrlib/GRRLIB_fbSimple.h"
static inline
void GRRLIB_Rectangle (const f32 x, const f32 y,
                        const f32 width, const f32 height,
                        const u32 color, const bool filled) {
    const f32 x2 = x + width;
    const f32 y2 = y + height;

    if (filled == true) {
        GX_Begin(0x80, 0, 4);
            GX_Position3f32(x, y, 0.0f);
            GX_Color1u32(color);
            GX_Position3f32(x2, y, 0.0f);
            GX_Color1u32(color);
            GX_Position3f32(x2, y2, 0.0f);
            GX_Color1u32(color);
            GX_Position3f32(x, y2, 0.0f);
            GX_Color1u32(color);
        GX_End();
    }
    else {
        GX_Begin(0xB0, 0, 5);
            GX_Position3f32(x, y, 0.0f);
            GX_Color1u32(color);
            GX_Position3f32(x2, y, 0.0f);
            GX_Color1u32(color);
            GX_Position3f32(x2, y2, 0.0f);
            GX_Color1u32(color);
            GX_Position3f32(x, y2, 0.0f);
            GX_Color1u32(color);
            GX_Position3f32(x, y, 0.0f);
            GX_Color1u32(color);
        GX_End();
    }
}
# 127 "C:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "C:/devkitPro/libogc/include/grrlib/GRRLIB_handle.h" 1
# 35 "C:/devkitPro/libogc/include/grrlib/GRRLIB_handle.h"
static inline
void GRRLIB_SetHandle (GRRLIB_texImg *tex, const int x, const int y) {
    if (tex->tiledtex) {
        tex->handlex = -(((int)tex->tilew)/2) + x;
        tex->handley = -(((int)tex->tileh)/2) + y;
    } else {
        tex->handlex = -(((int)tex->w)/2) + x;
        tex->handley = -(((int)tex->h)/2) + y;
    }
}







static inline
void GRRLIB_SetMidHandle (GRRLIB_texImg *tex, const bool enabled) {
    if (enabled == true) {
        if (tex->tiledtex) {
            tex->offsetx = (((int)tex->tilew)/2);
            tex->offsety = (((int)tex->tileh)/2);
        } else {
            tex->offsetx = (((int)tex->w)/2);
            tex->offsety = (((int)tex->h)/2);
        }
        GRRLIB_SetHandle(tex, tex->offsetx, tex->offsety);
    } else {
        GRRLIB_SetHandle(tex, 0, 0);
        tex->offsetx = 0;
        tex->offsety = 0;
    }
}
# 128 "C:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "C:/devkitPro/libogc/include/grrlib/GRRLIB_pixel.h" 1
# 40 "C:/devkitPro/libogc/include/grrlib/GRRLIB_pixel.h"
static inline
u32 GRRLIB_GetPixelFromtexImg (const int x, const int y,
                                const GRRLIB_texImg *tex) {
    u32 offs;
    u32 ar;
    u8* bp = (u8*)tex->data;

    offs = (((y&(~3))<<2)*tex->w) + ((x&(~3))<<4) + ((((y&3)<<2) + (x&3)) <<1);

    ar = (u32)(*((u16*)(bp+offs )));
    return (ar<<24) | ( ((u32)(*((u16*)(bp+offs+32)))) <<8) | (ar>>8);
}
# 61 "C:/devkitPro/libogc/include/grrlib/GRRLIB_pixel.h"
static inline
void GRRLIB_SetPixelTotexImg (const int x, const int y,
                               GRRLIB_texImg *tex, const u32 color) {
    u32 offs;
    u8* bp = (u8*)tex->data;

    offs = (((y&(~3))<<2)*tex->w) + ((x&(~3))<<4) + ((((y&3)<<2) + (x&3)) <<1);

    *((u16*)(bp+offs )) = (u16)((color <<8) | (color >>24));
    *((u16*)(bp+offs+32)) = (u16) (color >>8);
}







static inline
u32 GRRLIB_GetPixelFromFB (int x, int y) {
    u32 regval,val;

    regval = 0xc8000000|(((u32) (((u32)(x) & ((0x01 << (10)) - 1)) << (2))));
    regval = (regval&~0x3FF000)|(((u32) (((u32)(y) & ((0x01 << (10)) - 1)) << (12))));
    val = *(u32*)regval;

    return ( (u32)( ( ((u32)(((u32)(((u32)(val) >> (16)) & ((0x01 << (8)) - 1))))) <<24) | ((((u32)(((u32)(((u32)(val) >> (8)) & ((0x01 << (8)) - 1))))) &0xFF) <<16) | ((((u32)(val&0xff)) &0xFF) << 8) | ( ((u32)(((u32)(((u32)(val) >> (24)) & ((0x01 << (8)) - 1))))) &0xFF ) ) );
}







static inline
void GRRLIB_SetPixelToFB (int x, int y, u32 pokeColor) {
    u32 regval;

    regval = 0xc8000000|(((u32) (((u32)(x) & ((0x01 << (10)) - 1)) << (2))));
    regval = (regval&~0x3FF000)|(((u32) (((u32)(y) & ((0x01 << (10)) - 1)) << (12))));
    *(u32*)regval = ((u32) (((u32)(( (pokeColor) &0xFF)) & ((0x01 << (8)) - 1)) << (24))) | ((u32) (((u32)((((pokeColor) >>24) &0xFF)) & ((0x01 << (8)) - 1)) << (16))) | ((u32) (((u32)((((pokeColor) >>16) &0xFF)) & ((0x01 << (8)) - 1)) << (8))) | ((((pokeColor) >> 8) &0xFF)&0xff);
}
# 129 "C:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "C:/devkitPro/libogc/include/grrlib/GRRLIB_settings.h" 1
# 37 "C:/devkitPro/libogc/include/grrlib/GRRLIB_settings.h"
extern GRRLIB_drawSettings GRRLIB_Settings;





static inline
void GRRLIB_SetBlend (const GRRLIB_blendMode blendmode) {
    GRRLIB_Settings.blend = blendmode;
    switch (GRRLIB_Settings.blend) {
        case GRRLIB_BLEND_ALPHA:
            GX_SetBlendMode(1, 4, 5, 0);
            break;
        case GRRLIB_BLEND_ADD:
            GX_SetBlendMode(1, 4, 6, 0);
            break;
        case GRRLIB_BLEND_SCREEN:
            GX_SetBlendMode(1, 2, 6, 0);
            break;
        case GRRLIB_BLEND_MULTI:
            GX_SetBlendMode(3, 4, 5, 0);
            break;
        case GRRLIB_BLEND_INV:
            GX_SetBlendMode(1, 3, 3, 0);
            break;
        default:
            break;
    }
}





static inline
GRRLIB_blendMode GRRLIB_GetBlend (void) {
    return GRRLIB_Settings.blend;
}





static inline
void GRRLIB_SetAntiAliasing (const bool aa) {
    GRRLIB_Settings.antialias = aa;
}





static inline
bool GRRLIB_GetAntiAliasing (void) {
    return GRRLIB_Settings.antialias;
}
# 130 "C:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 1 "C:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h" 1
# 28 "C:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h"
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\malloc.h" 1 3
# 10 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\malloc.h" 3
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 11 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\malloc.h" 2 3


# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\machine\\malloc.h" 1 3
# 14 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\malloc.h" 2 3



# 16 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\malloc.h" 3
extern "C" {





struct mallinfo {
  size_t arena;
  size_t ordblks;
  size_t smblks;
  size_t hblks;
  size_t hblkhd;
  size_t usmblks;
  size_t fsmblks;
  size_t uordblks;
  size_t fordblks;
  size_t keepcost;
};



extern void *malloc (size_t);




extern void *_malloc_r (struct _reent *, size_t);


extern void free (void *);




extern void _free_r (struct _reent *, void *);


extern void *realloc (void *, size_t);




extern void *_realloc_r (struct _reent *, void *, size_t);


extern void *calloc (size_t, size_t);




extern void *_calloc_r (struct _reent *, size_t, size_t);


extern void *memalign (size_t, size_t);




extern void *_memalign_r (struct _reent *, size_t, size_t);


extern struct mallinfo mallinfo (void);




extern struct mallinfo _mallinfo_r (struct _reent *);


extern void malloc_stats (void);




extern void _malloc_stats_r (struct _reent *);


extern int mallopt (int, int);




extern int _mallopt_r (struct _reent *, int, int);


extern size_t malloc_usable_size (void *);




extern size_t _malloc_usable_size_r (struct _reent *, void *);





extern void *valloc (size_t);




extern void *_valloc_r (struct _reent *, size_t);


extern void *pvalloc (size_t);




extern void *_pvalloc_r (struct _reent *, size_t);


extern int malloc_trim (size_t);




extern int _malloc_trim_r (struct _reent *, size_t);


extern void __malloc_lock(struct _reent *);

extern void __malloc_unlock(struct _reent *);



extern void mstats (char *);




extern void _mstats_r (struct _reent *, char *);
# 166 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\malloc.h" 3
extern void cfree (void *);



}
# 29 "C:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h" 2
# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\string.h" 1 3
# 17 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\string.h" 3
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 18 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\string.h" 2 3






# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\strings.h" 1 3
# 44 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\strings.h" 3
extern "C" {

int bcmp(const void *, const void *, size_t) __attribute__((__pure__));
void bcopy(const void *, void *, size_t);
void bzero(void *, size_t);


void explicit_bzero(void *, size_t);


int ffs(int) __attribute__((__const__));


int ffsl(long) __attribute__((__const__));
int ffsll(long long) __attribute__((__const__));
int fls(int) __attribute__((__const__));
int flsl(long) __attribute__((__const__));
int flsll(long long) __attribute__((__const__));


char *index(const char *, int) __attribute__((__pure__));
char *rindex(const char *, int) __attribute__((__pure__));

int strcasecmp(const char *, const char *) __attribute__((__pure__));
int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));


int strcasecmp_l (const char *, const char *, locale_t);
int strncasecmp_l (const char *, const char *, size_t, locale_t);

}
# 25 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\string.h" 2 3


extern "C" {

void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void *, const void *, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *, const char *);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *, const char *);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *, const char *, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *, const char *, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *, const char *);

size_t strxfrm (char *, const char *, size_t);


int strcoll_l (const char *, const char *, locale_t);
char *strerror_l (int, locale_t);
size_t strxfrm_l (char *, const char *, size_t, locale_t);


char *strtok_r (char *, const char *, char **);


int timingsafe_bcmp (const void *, const void *, size_t);
int timingsafe_memcmp (const void *, const void *, size_t);


void * memccpy (void *, const void *, int, size_t);


void * mempcpy (void *, const void *, size_t);
void * memmem (const void *, size_t, const void *, size_t);
void * memrchr (const void *, int, size_t);
void * rawmemchr (const void *, int);


char *stpcpy (char *, const char *);
char *stpncpy (char *, const char *, size_t);


char *strcasestr (const char *, const char *);
char *strchrnul (const char *, int);


char *strdup (const char *) __attribute__((__malloc__)) __attribute__((__warn_unused_result__));

char *_strdup_r (struct _reent *, const char *);

char *strndup (const char *, size_t) __attribute__((__malloc__)) __attribute__((__warn_unused_result__));

char *_strndup_r (struct _reent *, const char *, size_t);






char *strerror_r (int, char *, size_t);
# 112 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\string.h" 3
char * _strerror_r (struct _reent *, int, int, int *);


size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);


size_t strnlen (const char *, size_t);


char *strsep (char **, const char *);


char *strnstr(const char *, const char *, size_t) __attribute__((__pure__));



char *strlwr (char *);
char *strupr (char *);



char *strsignal (int __signo);







int strverscmp (const char *, const char *);
# 172 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\string.h" 3
char *__attribute__((__nonnull__ (1))) basename (const char *) __asm__("" "__gnu_basename");


# 1 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\sys\\string.h" 1 3
# 176 "c:\\devkitpro\\devkitppc\\powerpc-eabi\\include\\string.h" 2 3

}
# 30 "C:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h" 2







# 36 "C:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h"
static inline
void GRRLIB_FlushTex (GRRLIB_texImg *tex) {
    DCFlushRange(tex->data, tex->w * tex->h * 4);
}







static inline
void GRRLIB_FreeTexture (GRRLIB_texImg *tex) {
    if(tex != 
# 49 "C:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h" 3 4
             __null
# 49 "C:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h"
                 ) {
        if (tex->data != 
# 50 "C:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h" 3 4
                        __null
# 50 "C:/devkitPro/libogc/include/grrlib/GRRLIB_texSetup.h"
                            ) {
            free(tex->data);
        }
        free(tex);
    }
}





static inline
void GRRLIB_ClearTex(GRRLIB_texImg* tex) {
    memset(tex->data, 0, (tex->h * tex->w) << 2);
    GRRLIB_FlushTex(tex);
}
# 131 "C:/devkitPro/libogc/include/grrlib/GRRLIB__inline.h" 2
# 191 "C:/devkitPro/libogc/include/grrlib.h" 2





   }
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2

# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_heads_png.h" 1

       
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_heads_png.h" 2


extern const uint8_t mii_heads_png[];
extern const uint8_t mii_heads_png_end[];

static constexpr size_t mii_heads_png_size=29211;
# 6 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_hairs1_png.h" 1

       
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_hairs1_png.h" 2


extern const uint8_t mii_hairs1_png[];
extern const uint8_t mii_hairs1_png_end[];

static constexpr size_t mii_hairs1_png_size=308977;
# 7 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_hairs2_png.h" 1

       
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_hairs2_png.h" 2


extern const uint8_t mii_hairs2_png[];
extern const uint8_t mii_hairs2_png_end[];

static constexpr size_t mii_hairs2_png_size=243422;
# 8 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_eyebrows_png.h" 1

       
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_eyebrows_png.h" 2


extern const uint8_t mii_eyebrows_png[];
extern const uint8_t mii_eyebrows_png_end[];

static constexpr size_t mii_eyebrows_png_size=42588;
# 9 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_eyes1_png.h" 1

       
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_eyes1_png.h" 2


extern const uint8_t mii_eyes1_png[];
extern const uint8_t mii_eyes1_png_end[];

static constexpr size_t mii_eyes1_png_size=112779;
# 10 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_eyes2_png.h" 1

       
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_eyes2_png.h" 2


extern const uint8_t mii_eyes2_png[];
extern const uint8_t mii_eyes2_png_end[];

static constexpr size_t mii_eyes2_png_size=14113;
# 11 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_eyes3_png.h" 1

       
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_eyes3_png.h" 2


extern const uint8_t mii_eyes3_png[];
extern const uint8_t mii_eyes3_png_end[];

static constexpr size_t mii_eyes3_png_size=129759;
# 12 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_noses_png.h" 1

       
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_noses_png.h" 2


extern const uint8_t mii_noses_png[];
extern const uint8_t mii_noses_png_end[];

static constexpr size_t mii_noses_png_size=19361;
# 13 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_features_png.h" 1

       
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_features_png.h" 2


extern const uint8_t mii_features_png[];
extern const uint8_t mii_features_png_end[];

static constexpr size_t mii_features_png_size=93542;
# 14 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_lips_png.h" 1

       
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_lips_png.h" 2


extern const uint8_t mii_lips_png[];
extern const uint8_t mii_lips_png_end[];

static constexpr size_t mii_lips_png_size=24920;
# 15 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_mole_png.h" 1

       
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_mole_png.h" 2


extern const uint8_t mii_mole_png[];
extern const uint8_t mii_mole_png_end[];

static constexpr size_t mii_mole_png_size=328;
# 16 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_beards_png.h" 1

       
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_beards_png.h" 2


extern const uint8_t mii_beards_png[];
extern const uint8_t mii_beards_png_end[];

static constexpr size_t mii_beards_png_size=48832;
# 17 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_mustache_png.h" 1

       
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_mustache_png.h" 2


extern const uint8_t mii_mustache_png[];
extern const uint8_t mii_mustache_png_end[];

static constexpr size_t mii_mustache_png_size=4191;
# 18 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2
# 1 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_glasses_png.h" 1

       
# 1 "c:\\devkitpro\\devkitppc\\lib\\gcc\\powerpc-eabi\\12.1.0\\include\\stddef.h" 1 3 4
# 4 "C:/devkitPro/examples/wii/Miis/rendermiiexample/build/mii_glasses_png.h" 2


extern const uint8_t mii_glasses_png[];
extern const uint8_t mii_glasses_png_end[];

static constexpr size_t mii_glasses_png_size=17600;
# 19 "C:/devkitPro/examples/wii/Miis/rendermiiexample/source/miidraw.cpp" 2

Mii* miis;

static GRRLIB_texImg* img_heads;
static GRRLIB_texImg* img_hairs1;
static GRRLIB_texImg* img_hairs2;
static GRRLIB_texImg* img_eyebrows;
static GRRLIB_texImg* img_eyes1;
static GRRLIB_texImg* img_eyes2;
static GRRLIB_texImg* img_eyes3;
static GRRLIB_texImg* img_noses;
static GRRLIB_texImg* img_features;
static GRRLIB_texImg* img_lips;
static GRRLIB_texImg* img_mole;
static GRRLIB_texImg* img_beards;
static GRRLIB_texImg* img_mustache;
static GRRLIB_texImg* img_glasses;
GRRLIB_texImg* img_staticmii[100];


int hairbg[72] = {56,56,56,56,56,56,56,56,56,56,56,56,16,56,56,56,56,56,17,18,56,19,20,56,56,56,21,56,56,56,56,56,56,56,56,56,22,23,56,56,24,25,56,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,56,56,48,49,50,51,52,53,56};
int hairfg[72] = {59,42,65,49,40,44,52,47,45,63,51,54,36,37,48,70,61,56,64,43,53,58,50,27,69,41,39,46,66,71,33,11,12,0,35,57,30,14,25,4,1,31,26,24,3,6,62,13,15,7,19,2,17,67,29,20,9,34,18,8,22,60,23,55,21,32,16,28,10,38,5,68};
unsigned int haircol[8] = {0x111111FF, 0x332222FF, 0x441111FF, 0xBB6644FF, 0x8888AAFF, 0x443322FF, 0x996644FF, 0xDDBB99FF};
unsigned int skincol[6] = {0xECCFBDFF, 0xF7BC7dFF, 0xD78A48FF, 0xF5B189FF, 0x995122FF, 0x563010FF};
unsigned int eyecol[6] = {0x000000FF, 0x778887FF, 0x7E6355FF, 0x888940FF, 0x6A84D0FF, 0x409B5AFF};
unsigned int lipcol[3] = {0xC76C46FF, 0xE44E3AFF, 0xD88789FF};
unsigned int glassescol[6] = {0x626D6CFF, 0x85703AFF, 0xAB4E37FF, 0x426996FF, 0xB97F27FF, 0xBDBFB9FF};
int eyebrows[24] = {1,3,14,15,11,10,0,6,8,4,13,12,2,19,16,18,22,9,21,5,17,7,20,23};
int eyes[48] = {2,6,0,42,1,24,29,36,3,16,45,13,17,26,46,9,8,5,33,14,11,20,44,18,30,21,7,10,34,41,31,32,15,12,19,23,27,28,38,4,22,25,39,43,37,40,35,47};
int noses[12] = {5,0,2,3,7,6,4,10,8,9,1,11};
int lips[24] = {6,1,14,16,17,5,10,12,7,13,8,19,23,11,22,18,9,15,21,2,20,3,4,0};



int feature=0;
int blink[100];
int blinkrand[100];
int blinkcount[100];
int startblink[100];

int neck=0;
int bodyadjust[100];

char miinames[100][11];


int MakeMiiHappy(int bodypart) {
 if(bodypart==1) {
  int miipart[8] = {3, 4, 5, 8, 14, 16, 19, 23};
  return(miipart[rand() % 8]);
 }
 else if(bodypart==2) {
  int miipart=0;
  return(miipart);
 }

 else return(0);
}
int MakeMiiSad(int bodypart) {
 if(bodypart==1) {
  int miipart[3] = {9, 22, 24};
  return(miipart[rand() % 3]);
 }
 else if(bodypart==2) {
  int miipart[3]={6, 33, 39};
  return(miipart[rand() % 3]);
 }

 else return(0);
}
int MakeMiiShocked(int bodypart) {
 if(bodypart==1) {
  int miipart[2] = {15, 11};
  return (miipart[rand() % 2]);
 }
 else if(bodypart==2) {
  int miipart[5] = {10, 13, 36, 37, 43};
  return(miipart[rand() % 5]);
 }

 else return(0);
}
int MakeMiiMad(int bodypart) {
 if(bodypart==1) {
  int miipart[3] = {1, 21, 24};
  return (miipart[rand() % 3]);
 }
 else if(bodypart==2) {
  int miipart[2] = {44, 44};
  return(miipart[rand() % 2]);
 }

 else return(0);
}
void GRRLIB_MiisInit() {

 img_heads = GRRLIB_LoadTexture(mii_heads_png);
 img_hairs1 = GRRLIB_LoadTexture(mii_hairs1_png);
 img_hairs2 = GRRLIB_LoadTexture(mii_hairs2_png);
 img_eyebrows = GRRLIB_LoadTexture(mii_eyebrows_png);
 img_eyes1 = GRRLIB_LoadTexture(mii_eyes1_png);
 img_eyes2 = GRRLIB_LoadTexture(mii_eyes2_png);
 img_eyes3 = GRRLIB_LoadTexture(mii_eyes3_png);
 img_noses = GRRLIB_LoadTexture(mii_noses_png);
 img_features = GRRLIB_LoadTexture(mii_features_png);
 img_lips = GRRLIB_LoadTexture(mii_lips_png);
 img_mole = GRRLIB_LoadTexture(mii_mole_png);
 img_beards = GRRLIB_LoadTexture(mii_beards_png);
 img_mustache = GRRLIB_LoadTexture(mii_mustache_png);
 img_glasses = GRRLIB_LoadTexture(mii_glasses_png);

 GRRLIB_InitTileSet(img_heads, 120, 120, 0);
 GRRLIB_InitTileSet(img_hairs1, 120, 120, 0);
 GRRLIB_InitTileSet(img_hairs2, 120, 120, 0);
 GRRLIB_InitTileSet(img_eyebrows, 36, 54, 0);
 GRRLIB_InitTileSet(img_eyes1, 54, 54, 0);
 GRRLIB_InitTileSet(img_eyes2, 54, 54, 0);
 GRRLIB_InitTileSet(img_eyes3, 54, 54, 0);
 GRRLIB_InitTileSet(img_noses, 50, 50, 0);
 GRRLIB_InitTileSet(img_features, 120, 120, 0);
 GRRLIB_InitTileSet(img_lips, 60, 60, 0);
 GRRLIB_InitTileSet(img_beards, 120, 140, 0);
 GRRLIB_InitTileSet(img_mustache, 60, 60, 0);
 GRRLIB_InitTileSet(img_glasses, 180, 72, 0);

 miis = loadMiis_Wii();
}


void GRRLIB_BuildMii(Mii mii, int miiid, int miiblinks, int miieyes, int miimouth, GRRLIB_texImg* tex) {

 GRRLIB_CompoStart();

 GRRLIB_SetHandle(img_hairs1, 60,0);
 GRRLIB_SetHandle(img_hairs2, 60,0);
 GRRLIB_DrawTile(230, 210, img_hairs2, 0, -1*(2*mii.hairPart-1), 1, haircol[mii.hairColor], hairbg[hairfg[mii.hairType]]);
 GRRLIB_DrawTile(230, 200, img_heads, 0, 1, 1, skincol[mii.skinColor], mii.faceShape);

 if(mii.faceShape==0) neck=2;
 else if(mii.faceShape==1) neck=0;
 else if(mii.faceShape==2) neck=8;
 else if(mii.faceShape==3) neck=5;
 else if(mii.faceShape==4) neck=1;
 else if(mii.faceShape==5) neck=1;
 else if(mii.faceShape==6) neck=9;
 else if(mii.faceShape==7) neck=10;

 if(mii.facialFeature==0) feature=39;
 else if(mii.facialFeature==1) feature=mii.faceShape;
 else if(mii.facialFeature==2) feature=mii.faceShape;
 else if(mii.facialFeature==3) feature=33;
 else if(mii.facialFeature==4) feature=34;
 else if(mii.facialFeature==5) feature=35;
 else if(mii.facialFeature==6) feature=36;
 else if(mii.facialFeature==7) feature=40+mii.faceShape;
 else if(mii.facialFeature==8) feature=38;
 else if(mii.facialFeature==9) feature=8+mii.faceShape;
 else if(mii.facialFeature==10) feature=16+mii.faceShape;
 else if(mii.facialFeature==11) feature=24+mii.faceShape;

 if(mii.facialFeature==2) {
  GRRLIB_DrawTile(230, 200, img_features, 0, 1, 1, skincol[mii.skinColor], 32);
  GRRLIB_DrawTile(230, 200, img_features, 0, 1, 1, skincol[mii.skinColor], feature);
 }
 else GRRLIB_DrawTile(230, 200, img_features, 0, 1, 1, skincol[mii.skinColor], feature);

 if(mii.beardType>0) GRRLIB_DrawTile(230, 200, img_beards, 0, 1, 1, haircol[mii.facialHairColor], ((mii.beardType-1)*8)+mii.faceShape);

 GRRLIB_SetHandle(img_mole, 6, 6);
 if(mii.mole==1) GRRLIB_DrawImg(252+(4*mii.moleHorizPos), 212+(2.8*mii.moleVertPos), img_mole, 0, .2+(mii.moleSize*0.1), .2+(mii.moleSize*0.1), 0xFFFFFFFF);


 blink[miiid]++;
 if(blink[miiid]>300+100*blinkrand[miiid]) startblink[miiid]=1;
 if(startblink[miiid]==1) blinkcount[miiid]++;
 if(blinkcount[miiid]>11) {
  blinkrand[miiid]=rand() % 8;
  blink[miiid]=0;
  startblink[miiid]=0;
  blinkcount[miiid]=0;
 }


 if(blinkcount[miiid]<11 && blinkcount[miiid]>1 && miiblinks==1) {
  GRRLIB_SetHandle(img_eyes1, 18,36);
  GRRLIB_DrawTile(272+(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes1, 11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), 0xFFFFFFFF, 46);
  GRRLIB_SetHandle(img_eyes2, 18,36);
  GRRLIB_DrawTile(272+(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes2, 11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), eyecol[mii.eyeColor], 46);
  GRRLIB_SetHandle(img_eyes3, 18,36);
  GRRLIB_DrawTile(272+(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes3, 11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), 0xFFFFFFFF, 46);
  GRRLIB_SetHandle(img_eyes1, 36,36);
  GRRLIB_DrawTile(254-(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes1, -11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), 0xFFFFFFFF, 95-46);
  GRRLIB_SetHandle(img_eyes2, 36,36);
  GRRLIB_DrawTile(254-(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes2, -11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), eyecol[mii.eyeColor], 95-46);
  GRRLIB_SetHandle(img_eyes3, 36,36);
  GRRLIB_DrawTile(254-(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes3, -11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), 0xFFFFFFFF, 95-46);
 }
 else {
  if(miieyes==0) {
   GRRLIB_SetHandle(img_eyes1, 18,36);
   GRRLIB_DrawTile(272+(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes1, 11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), 0xFFFFFFFF, eyes[mii.eyeType]);
   GRRLIB_SetHandle(img_eyes2, 18,36);
   GRRLIB_DrawTile(272+(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes2, 11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), eyecol[mii.eyeColor], eyes[mii.eyeType]);
   GRRLIB_SetHandle(img_eyes3, 18,36);
   GRRLIB_DrawTile(272+(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes3, 11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), 0xFFFFFFFF, eyes[mii.eyeType]);
   GRRLIB_SetHandle(img_eyes1, 36,36);
   GRRLIB_DrawTile(254-(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes1, -11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), 0xFFFFFFFF, 95-eyes[mii.eyeType]);
   GRRLIB_SetHandle(img_eyes2, 36,36);
   GRRLIB_DrawTile(254-(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes2, -11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), eyecol[mii.eyeColor], 95-eyes[mii.eyeType]);
   GRRLIB_SetHandle(img_eyes3, 36,36);
   GRRLIB_DrawTile(254-(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes3, -11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), 0xFFFFFFFF, 95-eyes[mii.eyeType]);
  }
  else {
   GRRLIB_SetHandle(img_eyes1, 18,36);
   GRRLIB_DrawTile(272+(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes1, 11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), 0xFFFFFFFF, miieyes-1);
   GRRLIB_SetHandle(img_eyes2, 18,36);
   GRRLIB_DrawTile(272+(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes2, 11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), eyecol[mii.eyeColor], miieyes-1);
   GRRLIB_SetHandle(img_eyes3, 18,36);
   GRRLIB_DrawTile(272+(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes3, 11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), 0xFFFFFFFF, miieyes-1);
   GRRLIB_SetHandle(img_eyes1, 36,36);
   GRRLIB_DrawTile(254-(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes1, -11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), 0xFFFFFFFF, 95-(miieyes-1));
   GRRLIB_SetHandle(img_eyes2, 36,36);
   GRRLIB_DrawTile(254-(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes2, -11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), eyecol[mii.eyeColor], 95-(miieyes-1));
   GRRLIB_SetHandle(img_eyes3, 36,36);
   GRRLIB_DrawTile(254-(2.6*mii.eyeHorizSpacing), 184+(2.8*(mii.eyeVertPos)), img_eyes3, -11.25 * (7-mii.eyeRotation), .3+(mii.eyeSize*0.1), .3+(mii.eyeSize*0.1), 0xFFFFFFFF, 95-(miieyes-1));
  }
 }

 GRRLIB_SetHandle(img_eyebrows, 0, 54);
 GRRLIB_DrawTile(288+(2.6*mii.eyebrowHorizSpacing), 166+(2.8*(mii.eyebrowVertPos-3)), img_eyebrows, 11.25 * (11-mii.eyebrowRotation), .3+(mii.eyebrowSize*0.1), .3+(mii.eyebrowSize*0.1), haircol[mii.eyebrowColor], eyebrows[mii.eyebrowType]);
 GRRLIB_SetHandle(img_eyebrows, 36, 54);
 GRRLIB_DrawTile(256-(2.6*mii.eyebrowHorizSpacing), 166+(2.8*(mii.eyebrowVertPos-3)), img_eyebrows, -11.25 * (11-mii.eyebrowRotation), .3+(mii.eyebrowSize*0.1), .3+(mii.eyebrowSize*0.1), haircol[mii.eyebrowColor], 53-eyebrows[mii.eyebrowType]);

 GRRLIB_SetHandle(img_lips, 30, 30);
 if(miimouth==0) {
  if(lips[mii.lipType]==1 || lips[mii.lipType]==6 || lips[mii.lipType]==11 || lips[mii.lipType]==17 || lips[mii.lipType]==19) {
   GRRLIB_DrawTile(260, 220+(2.6*mii.lipVertPos), img_lips, 0, .2+(mii.lipSize*0.1), .2+(mii.lipSize*0.1), lipcol[mii.lipColor], lips[mii.lipType]);
  }
  else {
   GRRLIB_DrawTile(260, 220+(2.6*mii.lipVertPos), img_lips, 0, .2+(mii.lipSize*0.1), .2+(mii.lipSize*0.1), 0XFFFFFFFF, lips[mii.lipType]);
  }
 }
 else {
  if(miimouth-1==1 || miimouth-1==6 || miimouth-1==11 || miimouth-1==17 || miimouth-1==19) {
   GRRLIB_DrawTile(260, 220+(2.6*mii.lipVertPos), img_lips, 0, .2+(mii.lipSize*0.1), .2+(mii.lipSize*0.1), 0xC76C46FF, miimouth-1);
  }
  else {
   GRRLIB_DrawTile(260, 220+(2.6*mii.lipVertPos), img_lips, 0, .2+(mii.lipSize*0.1), .2+(mii.lipSize*0.1), 0XFFFFFFFF, miimouth-1);
  }
 }

 GRRLIB_SetHandle(img_mustache, 30, 10);
 if(mii.mustacheType>0) GRRLIB_DrawTile(260, 244+(2.9*mii.mustacheVertPos), img_mustache, 0, .2+(mii.mustacheSize*0.1), .2+(mii.mustacheSize*0.1), haircol[mii.facialHairColor], mii.mustacheType-1);

 GRRLIB_SetHandle(img_noses, 25, 30);
 GRRLIB_DrawTile(265, 220+(2.6*mii.noseVertPos), img_noses, 0, .2+(mii.noseSize*0.1), .2+(mii.noseSize*0.1), skincol[mii.skinColor], noses[mii.noseType]);

 if(hairfg[mii.hairType]<56) {
  GRRLIB_DrawTile(230, 190, img_hairs1, 0, -1*(2*mii.hairPart-1), 1, haircol[mii.hairColor], hairfg[mii.hairType]);
 }
 else {
  GRRLIB_DrawTile(230, 190, img_hairs2, 0, -1*(2*mii.hairPart-1), 1, haircol[mii.hairColor], hairfg[mii.hairType]-56);
 }

 if(mii.glassesType > 0) {
  GRRLIB_SetHandle(img_glasses, 90, 32);
  if(mii.glassesType < 6) {
   GRRLIB_DrawTile(200, 195+(2.6*(mii.glassesVertPos)), img_glasses, 0, .1+(mii.glassesSize*0.1), .1+(mii.glassesSize*0.1), glassescol[mii.glassesColor], mii.glassesType-1);
  }
  else {
   GRRLIB_DrawTile(200, 195+(2.6*(mii.glassesVertPos)), img_glasses, 0, .1+(mii.glassesSize*0.1), .1+(mii.glassesSize*0.1), glassescol[mii.glassesColor], mii.glassesType+2);
   GRRLIB_DrawTile(200, 195+(2.6*(mii.glassesVertPos)), img_glasses, 0, .1+(mii.glassesSize*0.1), .1+(mii.glassesSize*0.1), 0xFFFFFFFF, mii.glassesType-1);
  }
 }
 GRRLIB_CompoEnd(200, 160, tex);
 strcpy(miinames[miiid], mii.name);
 bodyadjust[miiid] = neck;
}

void GRRLIB_CreateStaticMiis() {
 u8 i;
 for(i=0; i<NoOfMiis; i++) {
  img_staticmii[i] = GRRLIB_CreateEmptyTexture(180, 200);
  GRRLIB_BuildMii(miis[i], i, 0, 0, 0, img_staticmii[i]);
 }
}
